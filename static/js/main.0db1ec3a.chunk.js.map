{"version":3,"sources":["components/controlbar.jsx","components/node.jsx","utils/animate.js","utils/reset.js","utils/clear.js","utils/nodeFinding.js","utils/nodeChanging.js","utils/onMouseChange.js","utils/generateGrid.js","algorithms/dijkstra.js","utils/runAlgorithm.js","components/dataTab.jsx","components/pathfinder.jsx","components/infoMenu.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["Controlbar","renderTitle","style","display","justifyContent","alignItems","flexDirection","marginRight","marginLeft","fontSize","marginBottom","marginTop","renderAlgorithms","props","algorithm","algorithms","onAlgorithmSelect","animateCompletion","algorithmsArray","push","Button","key","className","onClick","disabled","charAt","toUpperCase","slice","Fragment","color","id","role","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","padding","margin","border","renderControlButtons","onVisualize","onPause","onReset","animateState","animated","Content","visible","Icon","name","hidden","renderAddons","onAddonSelect","selectedAddon","weight","onWeightSelect","Group","active","Dropdown","simple","direction","options","text","value","trigger","onChange","renderClearDropdown","onClear","state","this","Component","Node","handleClass","isStart","isEnd","isBarrier","isCheckpoint","isWeight","checkpointNumber","onMouseDown","onMouseUp","onMouseEnter","e","onContextMenu","preventDefault","icon","faPlayCircle","faStopCircle","toString","faCircle","faWeightHanging","animateNodes","currentNodes","interval","Promise","resolve","reject","setTimeout","node","element","document","getElementById","classList","contains","remove","offsetWidth","add","reset","grid","nodes","clear","clearSelection","newGrid","selection","count","clearGridBySelection","row","NaN","findNode","nodeId","dimensions","length","r","c","findNodeRef","findStart","findEnd","toggleNode","button","selectedWeight","checkpoints","preIndex","split","indexArray","parseInt","newCheckpoints","index","findIndex","checkpoint","splice","cNumber","checkpointNode","location","column","mouseDown","mouse","down","onStart","onEnd","start","end","mouseEnter","newNodeClone","changedNode","newNode","oldNode","oldNodeClone","oldNodeRef","newNodeRef","moveStart","moveEnd","createNewGrid","newRow","findClosestUnvisited","closestUnvisited","distanceToStart","Infinity","visited","findUnvisitedNeighbors","currentNode","neighbors","dijkstra","shortestDistance","dijkstraGrid","map","prevNode","mapGrid","visitedNodes","shortestPath","unvisitedNeighbors","neighbor","newDistance","unshift","runAlgorithm","short","distance","dijkstraCheckpoints","DataTab","renderAlgorithmData","fontWeight","renderShortestDistance","displayDistance","assert","require","Pathfinder","algorithmIndex","shortestPathIndex","renderContainer","onMouseLeave","handleMouseUp","renderNodes","rowIndex","handleMouseDown","handleMouseEnter","animateAlgorithms","a","aIndex","aStateChecker","localCompletion","animateNodesBind","bind","sIndex","sStateChecker","console","log","setState","handleVisualize","toast","error","handlePausePlay","newState","handleReset","handleAlgorithmSelect","handleAddonSelect","addon","handleWeightSelect","handleClear","currentRow","generateGrid","filter","InfoMenu","size","faSquareFull","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0db1ec3a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Icon, Dropdown } from \"semantic-ui-react\";\r\n\r\nclass Controlbar extends Component {\r\n  renderTitle = () => {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          flexDirection: \"column\",\r\n          marginRight: \"50px\",\r\n          marginLeft: \"35px\",\r\n        }}\r\n      >\r\n        <p style={{ fontSize: \"30px\", marginBottom: \"5px\", marginTop: \"5px\" }}>\r\n          Pathfind\r\n        </p>\r\n        <p style={{ fontSize: \"15px\", marginBottom: \"5px\", marginTop: \"5px\" }}>\r\n          Visualization Tool\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderAlgorithms = () => {\r\n    const {\r\n      algorithm,\r\n      algorithms,\r\n      onAlgorithmSelect,\r\n      animateCompletion,\r\n    } = this.props;\r\n    let algorithmsArray = [];\r\n    for (const algorithm of algorithms) {\r\n      algorithmsArray.push(\r\n        <Button\r\n          key={algorithm}\r\n          className=\"dropdown-item\"\r\n          onClick={() => onAlgorithmSelect(algorithm)}\r\n          //will remove as algorithms are added\\\r\n          disabled\r\n        >\r\n          {algorithm.charAt(0).toUpperCase() + algorithm.slice(1)}\r\n        </Button>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <li className=\"nav-item\">\r\n          <p className=\"nav-link\" style={{ color: \"black\" }}>\r\n            Algorithm:\r\n          </p>\r\n        </li>\r\n        <li className=\"nav-item dropdown\">\r\n          <Button\r\n            className=\"nav-link dropdown-toggle\"\r\n            id=\"navbarDropdown\"\r\n            role=\"button\"\r\n            data-toggle=\"dropdown\"\r\n            aria-haspopup=\"true\"\r\n            aria-expanded=\"false\"\r\n            disabled={animateCompletion === 2 || animateCompletion === 3}\r\n          >\r\n            {algorithm.charAt(0).toUpperCase() + algorithm.slice(1)}\r\n          </Button>\r\n          <div\r\n            className=\"dropdown-menu\"\r\n            aria-labelledby=\"navbarDropdown\"\r\n            style={{\r\n              fontSize: \"15px\",\r\n              padding: \"0\",\r\n              margin: \"0\",\r\n              border: \"0px solid black\",\r\n            }}\r\n          >\r\n            {algorithmsArray}\r\n          </div>\r\n        </li>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  renderControlButtons = () => {\r\n    const {\r\n      onVisualize,\r\n      onPause,\r\n      onReset,\r\n      animateState,\r\n      animateCompletion,\r\n    } = this.props;\r\n    return (\r\n      <div className=\"m-auto align-items-center\">\r\n        <Button animated onClick={onReset} disabled={animateCompletion === 1}>\r\n          <Button.Content visible>\r\n            <Icon name=\"redo alternate\" />\r\n          </Button.Content>\r\n          <Button.Content hidden>Reset</Button.Content>\r\n        </Button>\r\n        <Button\r\n          color=\"purple\"\r\n          onClick={onVisualize}\r\n          disabled={animateCompletion !== 1}\r\n          animated\r\n        >\r\n          <Button.Content visible>Visualize!</Button.Content>\r\n          <Button.Content hidden>Visualize!</Button.Content>\r\n        </Button>\r\n        <Button\r\n          animated\r\n          onClick={onPause}\r\n          disabled={animateCompletion === 1 || animateCompletion === 4}\r\n        >\r\n          <Button.Content visible>\r\n            <Icon\r\n              name={\r\n                !animateState &&\r\n                animateCompletion !== 1 &&\r\n                animateCompletion !== 4\r\n                  ? \"play\"\r\n                  : \"pause\"\r\n              }\r\n            />\r\n          </Button.Content>\r\n          <Button.Content hidden>\r\n            {!animateState && animateCompletion !== 1 && animateCompletion !== 4\r\n              ? \"Play\"\r\n              : \"Pause\"}\r\n          </Button.Content>\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderAddons = () => {\r\n    const { onAddonSelect, selectedAddon, weight, onWeightSelect } = this.props;\r\n    const weightOptions = [\r\n      { key: \"weight_2\", text: \"2\", value: 2 },\r\n      { key: \"weight_3\", text: \"3\", value: 3 },\r\n      { key: \"weight_4\", text: \"4\", value: 4 },\r\n      { key: \"weight_5\", text: \"5\", value: 5 },\r\n      { key: \"weight_6\", text: \"6\", value: 6 },\r\n      { key: \"weight_7\", text: \"7\", value: 7 },\r\n      { key: \"weight_8\", text: \"8\", value: 8 },\r\n      { key: \"weight_9\", text: \"9\", value: 9 },\r\n      { key: \"weight_10\", text: \"10\", value: 10 },\r\n    ];\r\n    return (\r\n      <React.Fragment>\r\n        <li className=\"nav-item\">\r\n          <p className=\"nav-link\" style={{ color: \"black\" }}>\r\n            Add-on Nodes:\r\n          </p>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Button.Group>\r\n            <Button\r\n              active={selectedAddon === \"barriers\"}\r\n              onClick={() => onAddonSelect(\"barriers\")}\r\n            >\r\n              Barrier\r\n            </Button>\r\n            <Button\r\n              active={selectedAddon === \"weights\"}\r\n              onClick={() => onAddonSelect(\"weights\")}\r\n            >\r\n              {\"Weighted: \" + weight}\r\n            </Button>\r\n            <Dropdown\r\n              simple\r\n              className=\"button icon\"\r\n              direction=\"left\"\r\n              options={weightOptions}\r\n              trigger={<></>}\r\n              onChange={onWeightSelect}\r\n            ></Dropdown>\r\n            <Button\r\n              active={selectedAddon === \"checkpoints\"}\r\n              onClick={() => onAddonSelect(\"checkpoints\")}\r\n            >\r\n              Checkpoint\r\n            </Button>\r\n          </Button.Group>\r\n        </li>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  renderClearDropdown = () => {\r\n    const { onClear, animateCompletion } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <li\r\n          className=\"nav-item dropdown\"\r\n          style={{ marginLeft: \"50px\", marginRight: \"35px\" }}\r\n        >\r\n          <Button\r\n            className=\"nav-link dropdown-toggle\"\r\n            id=\"navbarDropdown\"\r\n            role=\"button\"\r\n            data-toggle=\"dropdown\"\r\n            aria-haspopup=\"true\"\r\n            aria-expanded=\"false\"\r\n            color=\"purple\"\r\n            disabled={animateCompletion !== 1}\r\n          >\r\n            Clear\r\n          </Button>\r\n          <div\r\n            className=\"dropdown-menu dropdown-menu-right\"\r\n            aria-labelledby=\"navbarDropdown\"\r\n            style={{\r\n              fontSize: \"15px\",\r\n              padding: \"0\",\r\n              margin: \"0\",\r\n              border: \"0px solid black\",\r\n            }}\r\n          >\r\n            <Button\r\n              className=\"dropdown-item\"\r\n              color=\"purple\"\r\n              onClick={() => onClear(\"board\")}\r\n            >\r\n              Clear Board\r\n            </Button>\r\n            <Button\r\n              className=\"dropdown-item\"\r\n              color=\"purple\"\r\n              onClick={() => onClear(\"barriers\")}\r\n            >\r\n              Clear Barriers\r\n            </Button>\r\n            <Button\r\n              className=\"dropdown-item\"\r\n              color=\"purple\"\r\n              onClick={() => onClear(\"weights\")}\r\n            >\r\n              Clear Weights\r\n            </Button>\r\n            <Button\r\n              className=\"dropdown-item\"\r\n              color=\"purple\"\r\n              onClick={() => onClear(\"checkpoints\")}\r\n            >\r\n              Clear Checkpoints\r\n            </Button>\r\n          </div>\r\n        </li>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        {this.renderTitle()}\r\n        <ul className=\"navbar-nav\" style={{ fontSize: \"15px\" }}>\r\n          {this.renderAlgorithms()}\r\n        </ul>\r\n        {this.renderControlButtons()}\r\n        <ul className=\"navbar-nav\" style={{ fontSize: \"15px\" }}>\r\n          {this.renderAddons()}\r\n          {this.renderClearDropdown()}\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Controlbar;\r\n","import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faWeightHanging,\r\n  faCircle,\r\n  faPlayCircle,\r\n  faStopCircle,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"../css/node.css\";\r\n\r\nclass Node extends Component {\r\n  state = {};\r\n\r\n  handleClass = () => {\r\n    const { isStart, isEnd, isBarrier, isCheckpoint, isWeight } = this.props;\r\n    if (isStart) return \"node start\";\r\n    if (isEnd) return \"node end\";\r\n    if (isBarrier) return \"node barrier\";\r\n    if (isWeight) return \"node weight\";\r\n    if (isCheckpoint) return \"node checkpoint\";\r\n    return \"node default\";\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      isStart,\r\n      isEnd,\r\n      isCheckpoint,\r\n      checkpointNumber,\r\n      isWeight,\r\n      weight,\r\n      onMouseDown,\r\n      onMouseUp,\r\n      onMouseEnter,\r\n    } = this.props;\r\n    return (\r\n      <td\r\n        className={this.handleClass()}\r\n        id={id}\r\n        onMouseDown={(e) => onMouseDown(e, id)}\r\n        onMouseUp={(e) => onMouseUp()}\r\n        onMouseEnter={(e) => onMouseEnter(id)}\r\n        onContextMenu={(e) => e.preventDefault()}\r\n      >\r\n        {isStart && <FontAwesomeIcon icon={faPlayCircle} />}\r\n        {isEnd && <FontAwesomeIcon icon={faStopCircle} />}\r\n        {isCheckpoint && (\r\n          <span className=\"fa-layers\">\r\n            <span className={\"fa-layers-text checkpoint-label\"}>\r\n              {checkpointNumber.toString()}\r\n            </span>\r\n            <FontAwesomeIcon icon={faCircle} />\r\n          </span>\r\n        )}\r\n        {isWeight && (\r\n          <span className=\"fa-layers\">\r\n            <span className={\"fa-layers-text weight-label\"}>\r\n              {weight.toString()}\r\n            </span>\r\n            <FontAwesomeIcon icon={faWeightHanging} />\r\n          </span>\r\n        )}\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","export function animateNodes(currentNodes, style, interval) {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      for (const node of currentNodes) {\r\n        let element = document.getElementById(node.id);\r\n        if (element.classList.contains(style)) {\r\n          element.classList.remove(style);\r\n          void element.offsetWidth;\r\n          //   element.classList.add(style);\r\n          // } else {\r\n          //   element.className = style;\r\n          // }\r\n        }\r\n        element.classList.add(style);\r\n      }\r\n      resolve(true);\r\n    }, interval);\r\n  });\r\n}\r\n","export function reset(grid) {\r\n  for (let nodes of grid) {\r\n    for (let node of nodes) {\r\n      if (node.isStart) {\r\n        document.getElementById(node.id).className = \"node start\";\r\n      } else if (node.isEnd) {\r\n        document.getElementById(node.id).className = \"node end\";\r\n      } else if (node.isBarrier) {\r\n        document.getElementById(node.id).className = \"node barrier\";\r\n      } else if (node.isCheckpoint) {\r\n        document.getElementById(node.id).className = \"node checkpoint\";\r\n      } else if (node.isWeight) {\r\n        document.getElementById(node.id).className = \"node weight\";\r\n      } else {\r\n        document.getElementById(node.id).className = \"node default\";\r\n      }\r\n    }\r\n  }\r\n}\r\n","export function clear(clearSelection, grid) {\r\n  let newGrid = grid;\r\n  let selection = null;\r\n\r\n  if (clearSelection === \"board\") {\r\n    selection = [\"isBarrier\", \"isWeight\", \"isCheckpoint\"];\r\n    for (let count = 0; count < 3; count++) {\r\n      newGrid = clearGridBySelection(selection[count], newGrid);\r\n    }\r\n  } else {\r\n    if (clearSelection === \"barriers\") {\r\n      selection = \"isBarrier\";\r\n    } else if (clearSelection === \"weights\") {\r\n      selection = \"isWeight\";\r\n    } else if (clearSelection === \"checkpoints\") {\r\n      selection = \"isCheckpoint\";\r\n    }\r\n    newGrid = clearGridBySelection(selection, grid);\r\n  }\r\n  return newGrid;\r\n}\r\n\r\nexport function clearGridBySelection(selection, grid) {\r\n  let newGrid = grid;\r\n  for (let row of newGrid) {\r\n    for (let node of row) {\r\n      node[selection] = false;\r\n      if (selection === \"isCheckpoint\") {\r\n        node.checkpointNumber = NaN;\r\n      } else if (selection === \"isWeight\") {\r\n        node.weight = 1;\r\n      }\r\n    }\r\n  }\r\n  return newGrid;\r\n}\r\n","export function findNode(nodeId, grid) {\r\n  const dimensions = {\r\n    row: grid.length,\r\n    column: grid[0].length,\r\n  };\r\n\r\n  for (let r = 0; r < dimensions.row; r++) {\r\n    for (let c = 0; c < dimensions.column; c++) {\r\n      if (grid[r][c].id === nodeId) {\r\n        return grid[r][c];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function findNodeRef(nodeId, grid) {\r\n  const dimensions = {\r\n    row: grid.length,\r\n    column: grid[0].length,\r\n  };\r\n\r\n  for (let r = 0; r < dimensions.row; r++) {\r\n    for (let c = 0; c < dimensions.column; c++) {\r\n      if (grid[r][c].id === nodeId) {\r\n        return { r, c };\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function findStart(grid) {\r\n  const dimensions = {\r\n    row: grid.length,\r\n    column: grid[0].length,\r\n  };\r\n\r\n  for (let r = 0; r < dimensions.row; r++) {\r\n    for (let c = 0; c < dimensions.column; c++) {\r\n      if (grid[r][c].isStart) {\r\n        return grid[r][c];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function findEnd(grid) {\r\n  const dimensions = {\r\n    row: grid.length,\r\n    column: grid[0].length,\r\n  };\r\n\r\n  for (let r = 0; r < dimensions.row; r++) {\r\n    for (let c = 0; c < dimensions.column; c++) {\r\n      if (grid[r][c].isEnd) {\r\n        return grid[r][c];\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { findNode, findNodeRef } from \"./nodeFinding\";\r\n\r\nexport function toggleNode(\r\n  button,\r\n  nodeId,\r\n  grid,\r\n  selectedAddon,\r\n  selectedWeight,\r\n  checkpoints\r\n) {\r\n  let newGrid = grid;\r\n\r\n  const preIndex = nodeId.split(\"-\");\r\n  let indexArray = [];\r\n  for (const element of preIndex) {\r\n    indexArray.push(parseInt(element));\r\n  }\r\n  let node = newGrid[indexArray[0]][indexArray[1]];\r\n\r\n  let newCheckpoints = checkpoints;\r\n  if (button === 0) {\r\n    if (\r\n      !node.isStart &&\r\n      !node.isEnd &&\r\n      !node.isWeight &&\r\n      !node.isCheckpoint &&\r\n      !node.isBarrier\r\n    ) {\r\n      if (selectedAddon === \"barriers\") {\r\n        node.isBarrier = true;\r\n      } else if (selectedAddon === \"weights\") {\r\n        node.isWeight = true;\r\n        node.weight = selectedWeight;\r\n      } else if (selectedAddon === \"checkpoints\") {\r\n        newCheckpoints.push(node);\r\n        node.checkpointNumber = newCheckpoints.length;\r\n        node.isCheckpoint = true;\r\n      }\r\n    }\r\n  } else if (button === 2) {\r\n    node.isBarrier = false;\r\n    node.isCheckpoint = false;\r\n    const index = checkpoints.findIndex(\r\n      (checkpoint) => checkpoint.id === node.id\r\n    );\r\n    if (index !== -1) {\r\n      newCheckpoints.splice(index, 1);\r\n      let cNumber = 1;\r\n      for (let checkpoint of newCheckpoints) {\r\n        const checkpointNode = findNode(checkpoint.id, newGrid);\r\n        newGrid[checkpointNode.location.row][\r\n          checkpointNode.location.column\r\n        ].checkpointNumber = cNumber;\r\n        cNumber++;\r\n      }\r\n    }\r\n    node.checkpointNumber = NaN;\r\n    node.isWeight = false;\r\n    node.weight = 1;\r\n  }\r\n\r\n  newGrid[indexArray[0]][indexArray[1]] = node;\r\n  return { newGrid, newCheckpoints };\r\n}\r\n\r\nexport function moveStart(oldNode, newNode, grid) {\r\n  let newNodeClone = newNode;\r\n  let oldNodeClone = oldNode;\r\n  let oldNodeRef = findNodeRef(oldNode.id, grid);\r\n  let newNodeRef = findNodeRef(newNode.id, grid);\r\n  let newGrid = grid;\r\n  if (\r\n    !(\r\n      newNode.isBarrier ||\r\n      newNode.isCheckpoint ||\r\n      newNode.isWeight ||\r\n      newNode.isEnd\r\n    )\r\n  ) {\r\n    newNodeClone.isStart = true;\r\n    oldNodeClone.isStart = false;\r\n    newGrid[oldNodeRef.r][oldNodeRef.c] = oldNodeClone;\r\n    newGrid[newNodeRef.r][newNodeRef.c] = newNodeClone;\r\n  }\r\n  return { newGrid, newNodeClone };\r\n}\r\n\r\nexport function moveEnd(oldNode, newNode, grid) {\r\n  let newNodeClone = newNode;\r\n  let oldNodeClone = oldNode;\r\n  let oldNodeRef = findNodeRef(oldNode.id, grid);\r\n  let newNodeRef = findNodeRef(newNode.id, grid);\r\n  let newGrid = grid;\r\n  if (\r\n    !(\r\n      newNode.isBarrier ||\r\n      newNode.isCheckpoint ||\r\n      newNode.isWeight ||\r\n      newNode.isStart\r\n    )\r\n  ) {\r\n    newNodeClone.isEnd = true;\r\n    oldNodeClone.isEnd = false;\r\n    newGrid[oldNodeRef.r][oldNodeRef.c] = oldNodeClone;\r\n    newGrid[newNodeRef.r][newNodeRef.c] = newNodeClone;\r\n  }\r\n  return { newGrid, newNodeClone };\r\n}\r\n","import { toggleNode, moveStart, moveEnd } from \"./nodeChanging\";\r\nimport { findNode, findStart, findEnd } from \"./nodeFinding\";\r\n\r\nexport function mouseDown(\r\n  e,\r\n  nodeId,\r\n  grid,\r\n  selectedAddon,\r\n  selectedWeight,\r\n  checkpoints\r\n) {\r\n  let mouse = {\r\n    down: true,\r\n    button: e.button,\r\n    onStart: false,\r\n    onEnd: false,\r\n  };\r\n  let newGrid = null;\r\n  let newCheckpoints = null;\r\n  const start = findStart(grid);\r\n  const end = findEnd(grid);\r\n  if (nodeId === start.id) {\r\n    mouse.onStart = true;\r\n  } else if (nodeId === end.id) {\r\n    mouse.onEnd = true;\r\n  } else {\r\n    const {\r\n      newGrid: toggledGrid,\r\n      newCheckpoints: changedCheckpoints,\r\n    } = toggleNode(\r\n      e.button,\r\n      nodeId,\r\n      grid,\r\n      selectedAddon,\r\n      selectedWeight,\r\n      checkpoints\r\n    );\r\n    newGrid = toggledGrid;\r\n    newCheckpoints = changedCheckpoints;\r\n  }\r\n  return { newGrid, newCheckpoints, mouse };\r\n}\r\n\r\nexport function mouseEnter(\r\n  nodeId,\r\n  mouse,\r\n  grid,\r\n  selectedAddon,\r\n  selectedWeight,\r\n  checkpoints\r\n) {\r\n  let newGrid = [];\r\n  let newNodeClone = {};\r\n  let changedNode = \"\";\r\n  let newCheckpoints = [];\r\n\r\n  if (mouse.onStart) {\r\n    const newNode = findNode(nodeId, grid);\r\n    const start = findStart(grid);\r\n    const { newGrid: toggledGrid, newNodeClone: nodeClone } = moveStart(\r\n      start,\r\n      newNode,\r\n      grid\r\n    );\r\n    newGrid = toggledGrid;\r\n    newNodeClone = nodeClone;\r\n    changedNode = \"start\";\r\n  } else if (mouse.onEnd) {\r\n    const newNode = findNode(nodeId, grid);\r\n    const end = findEnd(grid);\r\n    const { newGrid: toggledGrid, newNodeClone: nodeClone } = moveEnd(\r\n      end,\r\n      newNode,\r\n      grid\r\n    );\r\n    newGrid = toggledGrid;\r\n    newNodeClone = nodeClone;\r\n    changedNode = \"end\";\r\n  } else {\r\n    const {\r\n      newGrid: toggledGrid,\r\n      newCheckpoints: changedCheckpoints,\r\n    } = toggleNode(\r\n      mouse.button,\r\n      nodeId,\r\n      grid,\r\n      selectedAddon,\r\n      selectedWeight,\r\n      checkpoints\r\n    );\r\n    newGrid = toggledGrid;\r\n    newCheckpoints = changedCheckpoints;\r\n  }\r\n\r\n  return { newGrid, newNodeClone, changedNode, newCheckpoints };\r\n}\r\n","export function generateGrid({ row, column }, start, end) {\r\n  let grid = [];\r\n\r\n  for (let r = 0; r < row; r++) {\r\n    let currentRow = [];\r\n\r\n    for (let c = 0; c < column; c++) {\r\n      currentRow.push({\r\n        id: r.toString() + \"-\" + c.toString(),\r\n        location: { row: r, column: c },\r\n        weight: 1,\r\n        isStart: r === start.row && c === start.column ? true : false,\r\n        isEnd: r === end.row && c === end.column ? true : false,\r\n        isBarrier: false,\r\n        isCheckpoint: false,\r\n        checkpointNumber: NaN,\r\n        isWeight: false,\r\n      });\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n\r\n  return grid;\r\n}\r\n\r\nexport function createNewGrid(grid) {\r\n  let newGrid = [];\r\n  for (let r = 0; r < grid.length; r++) {\r\n    let newRow = [];\r\n    for (let c = 0; c < grid[0].length; c++) {\r\n      newRow.push({\r\n        id: r.toString() + \"-\" + c.toString(),\r\n        location: { row: r, column: c },\r\n        weight: grid[r][c].weight,\r\n        isStart: false,\r\n        isEnd: false,\r\n        isBarrier: grid[r][c].isBarrier,\r\n        isCheckpoint: false,\r\n        isWeight: grid[r][c].isWeight,\r\n      });\r\n    }\r\n    newGrid.push(newRow);\r\n  }\r\n  return newGrid;\r\n}\r\n","import { findStart, findEnd } from \"../utils/nodeFinding\";\r\nimport { createNewGrid } from \"../utils/generateGrid\";\r\n\r\nfunction mapGrid(grid) {\r\n  return grid.map((row) => {\r\n    return row.map((node) => {\r\n      if (node.isBarrier) {\r\n        return {\r\n          ...node,\r\n          visited: true,\r\n          distanceToStart: node.isStart ? 0 : Infinity,\r\n          prevNode: {\r\n            row: NaN,\r\n            column: NaN,\r\n          },\r\n        };\r\n      }\r\n      return {\r\n        ...node,\r\n        visited: false,\r\n        distanceToStart: node.isStart ? 0 : Infinity,\r\n        prevNode: {\r\n          row: NaN,\r\n          column: NaN,\r\n        },\r\n      };\r\n    });\r\n  });\r\n}\r\n\r\nfunction findClosestUnvisited(grid) {\r\n  const dimensions = {\r\n    row: grid.length,\r\n    column: grid[0].length,\r\n  };\r\n\r\n  let closestUnvisited = { distanceToStart: Infinity };\r\n\r\n  for (let row = 0; row < dimensions.row; row++) {\r\n    for (let column = 0; column < dimensions.column; column++) {\r\n      if (!grid[row][column].visited) {\r\n        if (\r\n          grid[row][column].distanceToStart < closestUnvisited.distanceToStart\r\n        ) {\r\n          closestUnvisited = grid[row][column];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return closestUnvisited;\r\n}\r\n\r\nfunction findUnvisitedNeighbors(currentNode, grid) {\r\n  let neighbors = [];\r\n  if (grid[currentNode.location.row + 1]) {\r\n    if (\r\n      !grid[currentNode.location.row + 1][currentNode.location.column].visited\r\n    ) {\r\n      neighbors.push(\r\n        grid[currentNode.location.row + 1][currentNode.location.column]\r\n      );\r\n    }\r\n  }\r\n  if (grid[currentNode.location.row][currentNode.location.column + 1]) {\r\n    if (\r\n      !grid[currentNode.location.row][currentNode.location.column + 1].visited\r\n    ) {\r\n      neighbors.push(\r\n        grid[currentNode.location.row][currentNode.location.column + 1]\r\n      );\r\n    }\r\n  }\r\n  if (grid[currentNode.location.row - 1]) {\r\n    if (\r\n      !grid[currentNode.location.row - 1][currentNode.location.column].visited\r\n    ) {\r\n      neighbors.push(\r\n        grid[currentNode.location.row - 1][currentNode.location.column]\r\n      );\r\n    }\r\n  }\r\n  if (grid[currentNode.location.row][currentNode.location.column - 1]) {\r\n    if (\r\n      !grid[currentNode.location.row][currentNode.location.column - 1].visited\r\n    ) {\r\n      neighbors.push(\r\n        grid[currentNode.location.row][currentNode.location.column - 1]\r\n      );\r\n    }\r\n  }\r\n  return neighbors;\r\n}\r\n\r\nexport function dijkstra(grid) {\r\n  let dijkstraGrid = mapGrid(grid);\r\n\r\n  let visitedNodes = [];\r\n  let currentNode = { isEnd: false };\r\n  let shortestDistance = 0;\r\n  while (!currentNode.isEnd) {\r\n    currentNode = findClosestUnvisited(dijkstraGrid);\r\n    if (currentNode.distanceToStart === Infinity) {\r\n      return { shortestPath: [], visitedNodes };\r\n    }\r\n    currentNode.visited = true;\r\n    // console.log(currentNode);\r\n\r\n    const unvisitedNeighbors = findUnvisitedNeighbors(\r\n      currentNode,\r\n      dijkstraGrid\r\n    );\r\n    // console.log(neighbors);\r\n\r\n    for (let neighbor of unvisitedNeighbors) {\r\n      const newDistance = currentNode.distanceToStart + neighbor.weight;\r\n      if (newDistance < neighbor.distanceToStart) {\r\n        neighbor.distanceToStart = newDistance;\r\n        neighbor.prevNode = currentNode;\r\n      }\r\n      dijkstraGrid[neighbor.location.row][neighbor.location.column] = neighbor;\r\n    }\r\n\r\n    dijkstraGrid[currentNode.location.row][\r\n      currentNode.location.column\r\n    ] = currentNode;\r\n    visitedNodes.push([{ id: currentNode.id }]);\r\n  }\r\n\r\n  // const startNode = findStart(dijkstraGrid);\r\n\r\n  // const endNode = currentNode;\r\n\r\n  let shortestPath = [];\r\n  shortestDistance = currentNode.distanceToStart;\r\n\r\n  while (!currentNode.isStart) {\r\n    shortestPath.unshift([{ id: currentNode.id }]);\r\n    currentNode = currentNode.prevNode;\r\n  }\r\n  shortestPath.unshift([{ id: currentNode.id }]);\r\n\r\n  // console.log(shortestPath);\r\n  // console.log(visitedNodes);\r\n\r\n  return { shortestPath, visitedNodes, shortestDistance };\r\n}\r\n\r\nexport function dijkstraCheckpoints(grid, checkpoints) {\r\n  const start = findStart(grid);\r\n  const end = findEnd(grid);\r\n\r\n  let shortestPath = [];\r\n  let visitedNodes = [];\r\n  let shortestDistance = 0;\r\n\r\n  for (let c = 0; c <= checkpoints.length; c++) {\r\n    const newGrid = createNewGrid(grid);\r\n    if (c === 0) {\r\n      newGrid[start.location.row][start.location.column].isStart = true;\r\n      newGrid[checkpoints[c].location.row][\r\n        checkpoints[c].location.column\r\n      ].isEnd = true;\r\n      let {\r\n        shortestPath: short,\r\n        visitedNodes: visited,\r\n        shortestDistance: distance,\r\n      } = dijkstra(newGrid);\r\n      // console.log(short);\r\n      shortestPath.push(...short);\r\n      visitedNodes.push(...visited);\r\n      shortestDistance += distance;\r\n    } else if (c === checkpoints.length) {\r\n      newGrid[checkpoints[c - 1].location.row][\r\n        checkpoints[c - 1].location.column\r\n      ].isStart = true;\r\n      newGrid[end.location.row][end.location.column].isEnd = true;\r\n      let {\r\n        shortestPath: short,\r\n        visitedNodes: visited,\r\n        shortestDistance: distance,\r\n      } = dijkstra(newGrid);\r\n      short.splice(0, 1);\r\n      shortestPath.push(...short);\r\n      visitedNodes.push(...visited);\r\n      shortestDistance += distance;\r\n    } else {\r\n      newGrid[checkpoints[c - 1].location.row][\r\n        checkpoints[c - 1].location.column\r\n      ].isStart = true;\r\n      newGrid[checkpoints[c].location.row][\r\n        checkpoints[c].location.column\r\n      ].isEnd = true;\r\n      let {\r\n        shortestPath: short,\r\n        visitedNodes: visited,\r\n        shortestDistance: distance,\r\n      } = dijkstra(newGrid);\r\n      short.splice(0, 1);\r\n      shortestPath.push(...short);\r\n      visitedNodes.push(...visited);\r\n      shortestDistance += distance;\r\n    }\r\n  }\r\n  return { shortestPath, visitedNodes, shortestDistance };\r\n}\r\n","import { dijkstra, dijkstraCheckpoints } from \"./../algorithms/dijkstra\";\r\n\r\nexport function runAlgorithm(algorithm, grid, checkpoints) {\r\n  if (algorithm === \"dijkstra\") {\r\n    if (checkpoints.length === 0) {\r\n      return dijkstra(grid);\r\n    } else {\r\n      return dijkstraCheckpoints(grid, checkpoints);\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nclass DataTab extends Component {\r\n  renderAlgorithmData = (algorithm) => {\r\n    if (algorithm === \"dijkstra\") {\r\n      return (\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                <p style={{ fontWeight: \"bold\", marginRight: \"5px\" }}>\r\n                  Dijkstra:\r\n                </p>\r\n              </td>\r\n              <td>\r\n                <p>Finds the shortest path, supports weighted nodes</p>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      );\r\n    }\r\n  };\r\n\r\n  renderShortestDistance = (shortestDistance, animateCompletion) => {\r\n    const displayDistance =\r\n      animateCompletion === 4 && shortestDistance !== 0\r\n        ? shortestDistance\r\n        : \"N/A\";\r\n    return (\r\n      <div>\r\n        <p style={{ fontWeight: \"bold\" }}>\r\n          {\"Shortest Distance: \" + displayDistance}\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n  render() {\r\n    const { shortestDistance, animateCompletion, algorithm } = this.props;\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-around\",\r\n          margin: \"20px\",\r\n          fontSize: \"20px\",\r\n        }}\r\n      >\r\n        <div>{this.renderAlgorithmData(algorithm)}</div>\r\n        <div>\r\n          {this.renderShortestDistance(shortestDistance, animateCompletion)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataTab;\r\n","import React, { Component } from \"react\";\r\nimport Controlbar from \"./controlbar\";\r\nimport Node from \"./node\";\r\nimport { animateNodes } from \"../utils/animate\";\r\nimport { reset } from \"./../utils/reset\";\r\nimport { clear } from \"./../utils/clear\";\r\nimport { mouseDown, mouseEnter } from \"./../utils/onMouseChange\";\r\nimport { runAlgorithm } from \"./../utils/runAlgorithm\";\r\nimport { generateGrid } from \"../utils/generateGrid\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"../css/pathfinder.css\";\r\nimport DataTab from \"./dataTab\";\r\n\r\nvar assert = require(\"assert\");\r\n\r\nclass Pathfinder extends Component {\r\n  state = {\r\n    grid: [],\r\n    algorithm: \"dijkstra\",\r\n    algorithms: [\"dijkstra\", \"algorithm 1\", \"algorithm 2\", \"algorithm 3\"],\r\n    animateState: false,\r\n    animateCompletion: 1, //1 for not started, 2 for algorithm animated started, 3 for shortestpath started, 4 for completed\r\n    visitedNodes: [],\r\n    shortestPath: [],\r\n    shortestDistance: 0,\r\n    algorithmIndex: 0,\r\n    shortestPathIndex: 0,\r\n    checkpoints: [],\r\n    selectedAddon: \"barriers\",\r\n    selectedWeight: 5,\r\n    mouse: { down: false, button: NaN, onStart: false, onEnd: false },\r\n  };\r\n\r\n  dimensions = {\r\n    //if these values are to be modified, change node.css dimensions to match\r\n    row: 21,\r\n    column: 60,\r\n  };\r\n\r\n  start = {\r\n    row: 10,\r\n    column: 20,\r\n  };\r\n\r\n  end = {\r\n    row: 10,\r\n    column: 40,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const grid = generateGrid(this.dimensions, this.start, this.end);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  renderContainer = (grid) => {\r\n    return (\r\n      <table className=\"node-grid\" onMouseLeave={() => this.handleMouseUp()}>\r\n        <tbody>{this.renderNodes(grid)}</tbody>\r\n      </table>\r\n    );\r\n  };\r\n\r\n  renderNodes = (grid) => {\r\n    return grid.map((row, rowIndex) => {\r\n      return (\r\n        <tr className=\"node-row\" key={rowIndex} id={rowIndex}>\r\n          {row.map((node) => {\r\n            return (\r\n              <Node\r\n                key={node.id}\r\n                id={node.id}\r\n                location={node.location}\r\n                weight={node.weight}\r\n                isStart={node.isStart}\r\n                isEnd={node.isEnd}\r\n                isBarrier={node.isBarrier}\r\n                isCheckpoint={node.isCheckpoint}\r\n                checkpointNumber={node.checkpointNumber}\r\n                isWeight={node.isWeight}\r\n                onMouseDown={this.handleMouseDown}\r\n                onMouseUp={this.handleMouseUp}\r\n                onMouseEnter={this.handleMouseEnter}\r\n              />\r\n            );\r\n          })}\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n\r\n  animateAlgorithms = async (\r\n    animateCompletion,\r\n    visitedNodes,\r\n    shortestPath,\r\n    algorithmIndex,\r\n    shortestPathIndex\r\n  ) => {\r\n    //needed in this file since function does state checking through every iteration\r\n\r\n    let localCompletion = animateCompletion;\r\n\r\n    let aIndex = algorithmIndex;\r\n    let aStateChecker = localCompletion === 2 ? true : false;\r\n    while (aStateChecker) {\r\n      let animateNodesBind = animateNodes.bind(this);\r\n      await animateNodesBind(visitedNodes[aIndex], \"visited\", 10);\r\n      aIndex++;\r\n      aStateChecker = this.state.animateState;\r\n      if (aIndex === visitedNodes.length) {\r\n        aStateChecker = false;\r\n        localCompletion = 3;\r\n      }\r\n    }\r\n\r\n    let sIndex = 0;\r\n    if (shortestPath.length > 0) {\r\n      sIndex = shortestPathIndex;\r\n      let sStateChecker = localCompletion === 3 ? true : false;\r\n      while (sStateChecker) {\r\n        let animateNodesBind = animateNodes.bind(this);\r\n        await animateNodesBind(shortestPath[sIndex], \"shortest-path\", 40);\r\n        sIndex++;\r\n        sStateChecker = this.state.animateState;\r\n        if (sIndex === shortestPath.length) {\r\n          localCompletion = 4;\r\n          console.log(\"Completed\");\r\n          sStateChecker = false;\r\n        }\r\n      }\r\n    }\r\n    this.setState({\r\n      algorithmIndex: aIndex,\r\n      shortestPathIndex: sIndex,\r\n      animateCompletion: localCompletion,\r\n      animateState: false,\r\n    });\r\n  };\r\n\r\n  handleVisualize = async () => {\r\n    const {\r\n      animateState,\r\n      animateCompletion,\r\n      grid,\r\n      algorithm,\r\n      shortestPathIndex,\r\n      algorithmIndex,\r\n      checkpoints,\r\n    } = this.state;\r\n    assert(animateState === false && animateCompletion === 1);\r\n    this.setState({ animateState: true, animateCompletion: 2 });\r\n\r\n    const { shortestPath, visitedNodes, shortestDistance } = runAlgorithm(\r\n      algorithm,\r\n      grid,\r\n      checkpoints\r\n    );\r\n    // console.log(visitedNodes);\r\n    // console.log(shortestPath);\r\n    if (shortestPath.length === 0) {\r\n      toast.error(\"No path to destination was found...\");\r\n    }\r\n\r\n    this.setState({ shortestPath, visitedNodes, shortestDistance });\r\n    console.log(\"Initiating\");\r\n    await this.animateAlgorithms(\r\n      2,\r\n      visitedNodes,\r\n      shortestPath,\r\n      algorithmIndex,\r\n      shortestPathIndex\r\n    );\r\n  };\r\n\r\n  handlePausePlay = async () => {\r\n    const {\r\n      animateState,\r\n      animateCompletion,\r\n      shortestPath,\r\n      visitedNodes,\r\n      shortestPathIndex,\r\n      algorithmIndex,\r\n    } = this.state;\r\n    assert(animateCompletion === 2 || animateCompletion === 3);\r\n\r\n    let newState = !animateState;\r\n    this.setState({ animateState: newState });\r\n\r\n    if (newState === true) {\r\n      console.log(\"Resuming\");\r\n      await this.animateAlgorithms(\r\n        animateCompletion,\r\n        visitedNodes,\r\n        shortestPath,\r\n        algorithmIndex,\r\n        shortestPathIndex\r\n      );\r\n    } else {\r\n      console.log(\"Paused\");\r\n    }\r\n  };\r\n\r\n  handleReset = () => {\r\n    const { grid } = this.state;\r\n    this.setState({ animateState: false }); //stops animation\r\n    setTimeout(() => {\r\n      //resets everything\r\n      reset(grid);\r\n      this.setState({\r\n        animateCompletion: 1,\r\n        algorithmIndex: 0,\r\n        shortestPathIndex: 0,\r\n        visitedNodes: [],\r\n        shortestPath: [],\r\n        shortestDistance: 0,\r\n      });\r\n      console.log(\"Terminated\");\r\n    }, 11);\r\n  };\r\n\r\n  handleAlgorithmSelect = (algorithm) => {\r\n    this.setState({ algorithm });\r\n    this.handleReset();\r\n  };\r\n\r\n  handleAddonSelect = (addon) => {\r\n    this.setState({ selectedAddon: addon });\r\n  };\r\n\r\n  handleWeightSelect = (e, { value }) => {\r\n    this.setState({ selectedWeight: value});\r\n  }\r\n\r\n\r\n  handleClear = (clearSelection) => {\r\n    const { grid, animateCompletion } = this.state;\r\n    if (animateCompletion !== 1) {\r\n      return toast.error(\r\n        \"Please reset or wait for visualization to complete before clearing :)\"\r\n      );\r\n    }\r\n    const newGrid = clear(clearSelection, grid);\r\n\r\n    if (clearSelection === \"checkpoints\" || clearSelection === \"board\") {\r\n      this.setState({ checkpoints: [] });\r\n    }\r\n    this.setState({ grid: newGrid });\r\n  };\r\n\r\n  handleMouseDown = (e, nodeId) => {\r\n    const {\r\n      animateCompletion,\r\n      grid,\r\n      selectedAddon,\r\n      selectedWeight,\r\n      checkpoints,\r\n    } = this.state;\r\n    if (animateCompletion !== 1) {\r\n      return toast.error(\r\n        \"Please reset or clear the board before making changes!\"\r\n      );\r\n    }\r\n    const { newGrid, newCheckpoints, mouse } = mouseDown(\r\n      e,\r\n      nodeId,\r\n      grid,\r\n      selectedAddon,\r\n      selectedWeight,\r\n      checkpoints\r\n    );\r\n    if (newGrid !== null && newCheckpoints !== null) {\r\n      this.setState({ grid: newGrid, checkpoints: newCheckpoints });\r\n    }\r\n    this.setState({ mouse });\r\n  };\r\n\r\n  handleMouseEnter = (nodeId) => {\r\n    const {\r\n      mouse,\r\n      grid,\r\n      selectedAddon,\r\n      selectedWeight,\r\n      checkpoints,\r\n    } = this.state;\r\n    if (mouse.down) {\r\n      const { newGrid, newNodeClone, changedNode, newCheckpoints } = mouseEnter(\r\n        nodeId,\r\n        mouse,\r\n        grid,\r\n        selectedAddon,\r\n        selectedWeight,\r\n        checkpoints\r\n      );\r\n      if (mouse.onStart || mouse.onEnd) {\r\n        this.setState({\r\n          [changedNode]: {\r\n            row: newNodeClone.location.row,\r\n            column: newNodeClone.location.column,\r\n          },\r\n        });\r\n      } else {\r\n        this.setState({ checkpoints: newCheckpoints });\r\n      }\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  };\r\n\r\n  handleMouseUp = () => {\r\n    const mouse = {\r\n      down: false,\r\n      button: NaN,\r\n      onStart: false,\r\n      onEnd: false,\r\n    };\r\n    this.setState({ mouse });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      grid,\r\n      animateState,\r\n      animateCompletion,\r\n      algorithm,\r\n      algorithms,\r\n      selectedAddon,\r\n      shortestDistance,\r\n      selectedWeight,\r\n    } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <Controlbar\r\n          onVisualize={this.handleVisualize}\r\n          onPause={this.handlePausePlay}\r\n          onReset={this.handleReset}\r\n          animateState={animateState}\r\n          animateCompletion={animateCompletion}\r\n          algorithm={algorithm}\r\n          algorithms={algorithms.filter((a) => a !== algorithm)}\r\n          onAlgorithmSelect={this.handleAlgorithmSelect}\r\n          onAddonSelect={this.handleAddonSelect}\r\n          selectedAddon={selectedAddon}\r\n          onClear={this.handleClear}\r\n          weight={selectedWeight}\r\n          onWeightSelect={this.handleWeightSelect}\r\n        />\r\n        <div>{this.renderContainer(grid)}</div>\r\n        <DataTab\r\n          shortestDistance={shortestDistance}\r\n          animateCompletion={animateCompletion}\r\n          algorithm={algorithm}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pathfinder;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faWeightHanging,\r\n  faCircle,\r\n  faPlayCircle,\r\n  faStopCircle,\r\n  faSquareFull,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"../css/infoMenu.css\";\r\n\r\nconst InfoMenu = () => {\r\n  return (\r\n    <div className=\"info-menu\">\r\n      <div className=\"content-separator-2\" style={{ marginBottom: \"25px\" }} />\r\n      <div className=\"legend\">\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon icon={faPlayCircle} size=\"2x\" />\r\n          <p className=\"legend-item-label\">Start</p>\r\n        </div>\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon icon={faStopCircle} size=\"2x\" />\r\n          <p className=\"legend-item-label\">End</p>\r\n        </div>\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon\r\n            icon={faSquareFull}\r\n            className=\"barrier-icon\"\r\n            size=\"2x\"\r\n          />\r\n          <p className=\"legend-item-label\">Barrier</p>\r\n        </div>\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon\r\n            icon={faWeightHanging}\r\n            size=\"2x\"\r\n            className=\"weight-icon\"\r\n          />\r\n          <p className=\"legend-item-label\">Weight</p>\r\n        </div>\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon\r\n            icon={faCircle}\r\n            size=\"2x\"\r\n            className=\"checkpoint-icon\"\r\n          />\r\n          <p className=\"legend-item-label\">Checkpoint</p>\r\n        </div>\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon\r\n            icon={faSquareFull}\r\n            className=\"visited-icon\"\r\n            size=\"2x\"\r\n          />\r\n          <p className=\"legend-item-label\">Visited</p>\r\n        </div>\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon\r\n            icon={faSquareFull}\r\n            className=\"shortest-path-icon\"\r\n            size=\"2x\"\r\n          />\r\n          <p className=\"legend-item-label\">Shortest Path</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"content-separator-2\" style={{ marginTop: \"25px\" }} />\r\n      <div className=\"quick-guide\">\r\n        <h2 className=\"header\">Quick Guide</h2>\r\n        <table className=\"menu-table\">\r\n          <tbody>\r\n            <tr>\r\n              <td className=\"table-column\">\r\n                <div className=\"list-item\">\r\n                  <p className=\"list-item-label\">\r\n                    Select an algorithm along the top left and click visualize!\r\n                  </p>\r\n                  <div className=\"content-separator\" />\r\n                </div>\r\n\r\n                <div className=\"list-item\">\r\n                  <p className=\"list-item-label\">\r\n                    Select an addon on the top right and left click/drag along\r\n                    the board to add addons.\r\n                  </p>\r\n                  <div className=\"content-separator\" />\r\n                </div>\r\n                <div className=\"list-item\">\r\n                  <p className=\"list-item-label\">\r\n                    Right click/drag along the board to remove any addons.\r\n                  </p>\r\n                </div>\r\n              </td>\r\n              <td className=\"table-column\">\r\n                <div className=\"list-item\">\r\n                  <p className=\"list-item-label\">\r\n                    Click reset to change the board or perform another\r\n                    visualization.\r\n                  </p>\r\n                  <div className=\"content-separator\" />\r\n                </div>\r\n                <div className=\"list-item\">\r\n                  <p className=\"list-item-label\">\r\n                    Click and drag the start and end nodes to move the starting\r\n                    and ending points of the visualization.\r\n                  </p>\r\n                  <div className=\"content-separator\" />\r\n                </div>\r\n                <div className=\"list-item\">\r\n                  <p className=\"list-item-label\">\r\n                    While visualizing, changing the board will be disabled.\r\n                    Click reset to make any changes.\r\n                  </p>\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoMenu;\r\n","import React, { Component } from \"react\";\nimport Pathfinder from \"./pathfinder\";\nimport InfoMenu from \"./infoMenu\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"../css/App.css\";\n\nclass App extends Component {\n  state = {};\n\n  render() {\n    return (\n      <React.Fragment>\n        <ToastContainer />\n        <Pathfinder />\n        <InfoMenu />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap.js\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}