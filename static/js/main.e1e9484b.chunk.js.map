{"version":3,"sources":["components/controlbar.jsx","components/node.jsx","algorithms/dijkstra.js","algorithms/animate.js","components/pathfinder.jsx","components/infoMenu.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["Controlbar","renderTitle","style","display","justifyContent","alignItems","flexDirection","marginRight","marginLeft","fontSize","marginBottom","marginTop","renderAlgorithms","props","algorithm","algorithms","onAlgorithmSelect","animateCompletion","algorithmsArray","push","Button","key","className","onClick","disabled","charAt","toUpperCase","slice","Fragment","color","id","role","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","padding","margin","border","renderControlButtons","onVisualize","onPause","onReset","animateState","animated","Content","visible","Icon","name","hidden","renderAddons","onAddonSelect","selectedAddon","Group","active","renderClearDropdown","onClear","state","this","Component","Node","handleClass","isStart","isEnd","isBarrier","isCheckpoint","isWeight","checkpointNumber","weight","onMouseDown","onMouseUp","onMouseEnter","e","onContextMenu","preventDefault","icon","faPlayCircle","faStopCircle","toString","faCircle","faWeightHanging","findClosestUnvisited","grid","dimensions","length","closestUnvisited","distanceToStart","Infinity","row","column","visited","findUnvisitedNeighbors","currentNode","neighbors","location","dijkstra","dijkstraGrid","map","node","prevNode","NaN","mapGrid","visitedNodes","shortestPath","unvisitedNeighbors","neighbor","newDistance","unshift","findStart","r","c","findEnd","createNewGrid","newGrid","newRow","dijkstraCheckpoints","checkpoints","start","end","short","splice","animateNodes","currentNodes","interval","Promise","resolve","reject","setTimeout","element","document","getElementById","classList","contains","remove","offsetWidth","add","assert","require","Pathfinder","algorithmIndex","shortestPathIndex","selectedWeight","mouse","down","button","onStart","onEnd","renderContainer","onMouseLeave","handleMouseUp","renderNodes","rowIndex","handleMouseDown","handleMouseEnter","runAlgorithm","animateAlgorithms","a","aIndex","aStateChecker","localCompletion","animateNodesBind","bind","sIndex","sStateChecker","console","log","setState","handleVisualize","toast","error","handlePausePlay","newState","handleReset","nodes","handleAlgorithmSelect","handleAddonSelect","addon","clearGridBySelection","selection","handleClear","clear","generateGrid","findNode","nodeId","toggleNode","preIndex","split","indexArray","parseInt","newCheckpoints","index","findIndex","checkpoint","cNumber","checkpointNode","findNodeRef","moveStart","oldNode","newNode","newNodeClone","oldNodeClone","oldNodeRef","newNodeRef","moveEnd","currentRow","filter","InfoMenu","size","faSquareFull","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e1e9484b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Icon } from \"semantic-ui-react\";\r\n\r\nclass Controlbar extends Component {\r\n  renderTitle = () => {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          flexDirection: \"column\",\r\n          marginRight: \"50px\",\r\n          marginLeft: \"35px\",\r\n        }}\r\n      >\r\n        <p style={{ fontSize: \"30px\", marginBottom: \"5px\", marginTop: \"5px\" }}>\r\n          Pathfind\r\n        </p>\r\n        <p style={{ fontSize: \"15px\", marginBottom: \"5px\", marginTop: \"5px\" }}>\r\n          Visualization Tool\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderAlgorithms = () => {\r\n    const {\r\n      algorithm,\r\n      algorithms,\r\n      onAlgorithmSelect,\r\n      animateCompletion,\r\n    } = this.props;\r\n    let algorithmsArray = [];\r\n    for (const algorithm of algorithms) {\r\n      algorithmsArray.push(\r\n        <Button\r\n          key={algorithm}\r\n          className=\"dropdown-item\"\r\n          onClick={() => onAlgorithmSelect(algorithm)}\r\n          //will remove as algorithms are added\\\r\n          disabled\r\n        >\r\n          {algorithm.charAt(0).toUpperCase() + algorithm.slice(1)}\r\n        </Button>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <li className=\"nav-item\">\r\n          <p className=\"nav-link\" style={{ color: \"black\" }}>\r\n            Algorithm:\r\n          </p>\r\n        </li>\r\n        <li className=\"nav-item dropdown\">\r\n          <Button\r\n            className=\"nav-link dropdown-toggle\"\r\n            id=\"navbarDropdown\"\r\n            role=\"button\"\r\n            data-toggle=\"dropdown\"\r\n            aria-haspopup=\"true\"\r\n            aria-expanded=\"false\"\r\n            disabled={animateCompletion === 2 || animateCompletion === 3}\r\n          >\r\n            {algorithm.charAt(0).toUpperCase() + algorithm.slice(1)}\r\n          </Button>\r\n          <div\r\n            className=\"dropdown-menu\"\r\n            aria-labelledby=\"navbarDropdown\"\r\n            style={{\r\n              fontSize: \"15px\",\r\n              padding: \"0\",\r\n              margin: \"0\",\r\n              border: \"0px solid black\",\r\n            }}\r\n          >\r\n            {algorithmsArray}\r\n          </div>\r\n        </li>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  renderControlButtons = () => {\r\n    const {\r\n      onVisualize,\r\n      onPause,\r\n      onReset,\r\n      animateState,\r\n      animateCompletion,\r\n    } = this.props;\r\n    return (\r\n      <div className=\"m-auto align-items-center\">\r\n        <Button animated onClick={onReset} disabled={animateCompletion === 1}>\r\n          <Button.Content visible>\r\n            <Icon name=\"redo alternate\" />\r\n          </Button.Content>\r\n          <Button.Content hidden>Reset</Button.Content>\r\n        </Button>\r\n        <Button\r\n          color=\"purple\"\r\n          onClick={onVisualize}\r\n          disabled={animateCompletion !== 1}\r\n          animated\r\n        >\r\n          <Button.Content visible>Visualize!</Button.Content>\r\n          <Button.Content hidden>Visualize!</Button.Content>\r\n        </Button>\r\n        <Button\r\n          animated\r\n          onClick={onPause}\r\n          disabled={animateCompletion === 1 || animateCompletion === 4}\r\n        >\r\n          <Button.Content visible>\r\n            <Icon\r\n              name={\r\n                !animateState &&\r\n                animateCompletion !== 1 &&\r\n                animateCompletion !== 4\r\n                  ? \"play\"\r\n                  : \"pause\"\r\n              }\r\n            />\r\n          </Button.Content>\r\n          <Button.Content hidden>\r\n            {!animateState && animateCompletion !== 1 && animateCompletion !== 4\r\n              ? \"Play\"\r\n              : \"Pause\"}\r\n          </Button.Content>\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderAddons = () => {\r\n    const { onAddonSelect, selectedAddon } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <li className=\"nav-item\">\r\n          <p className=\"nav-link\" style={{ color: \"black\" }}>\r\n            Add-on Nodes:\r\n          </p>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Button.Group>\r\n            <Button\r\n              active={selectedAddon === \"barriers\"}\r\n              onClick={() => onAddonSelect(\"barriers\")}\r\n            >\r\n              Barrier\r\n            </Button>\r\n            <Button\r\n              active={selectedAddon === \"weights\"}\r\n              onClick={() => onAddonSelect(\"weights\")}\r\n            >\r\n              Weighted\r\n            </Button>\r\n            <Button\r\n              active={selectedAddon === \"checkpoints\"}\r\n              onClick={() => onAddonSelect(\"checkpoints\")}\r\n            >\r\n              Checkpoint\r\n            </Button>\r\n          </Button.Group>\r\n        </li>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  renderClearDropdown = () => {\r\n    const { onClear, animateCompletion } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <li\r\n          className=\"nav-item dropdown\"\r\n          style={{ marginLeft: \"50px\", marginRight: \"35px\" }}\r\n        >\r\n          <Button\r\n            className=\"nav-link dropdown-toggle\"\r\n            id=\"navbarDropdown\"\r\n            role=\"button\"\r\n            data-toggle=\"dropdown\"\r\n            aria-haspopup=\"true\"\r\n            aria-expanded=\"false\"\r\n            color=\"purple\"\r\n            disabled={animateCompletion !== 1}\r\n          >\r\n            Clear\r\n          </Button>\r\n          <div\r\n            className=\"dropdown-menu dropdown-menu-right\"\r\n            aria-labelledby=\"navbarDropdown\"\r\n            style={{\r\n              fontSize: \"15px\",\r\n              padding: \"0\",\r\n              margin: \"0\",\r\n              border: \"0px solid black\",\r\n            }}\r\n          >\r\n            <Button\r\n              className=\"dropdown-item\"\r\n              color=\"purple\"\r\n              onClick={() => onClear(\"board\")}\r\n            >\r\n              Clear Board\r\n            </Button>\r\n            <Button\r\n              className=\"dropdown-item\"\r\n              color=\"purple\"\r\n              onClick={() => onClear(\"barriers\")}\r\n            >\r\n              Clear Barriers\r\n            </Button>\r\n            <Button\r\n              className=\"dropdown-item\"\r\n              color=\"purple\"\r\n              onClick={() => onClear(\"weights\")}\r\n            >\r\n              Clear Weights\r\n            </Button>\r\n            <Button\r\n              className=\"dropdown-item\"\r\n              color=\"purple\"\r\n              onClick={() => onClear(\"checkpoints\")}\r\n            >\r\n              Clear Checkpoints\r\n            </Button>\r\n          </div>\r\n        </li>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        {this.renderTitle()}\r\n        <ul className=\"navbar-nav\" style={{ fontSize: \"15px\" }}>\r\n          {this.renderAlgorithms()}\r\n        </ul>\r\n        {this.renderControlButtons()}\r\n        <ul className=\"navbar-nav\" style={{ fontSize: \"15px\" }}>\r\n          {this.renderAddons()}\r\n          {this.renderClearDropdown()}\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Controlbar;\r\n","import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faWeightHanging,\r\n  faCircle,\r\n  faPlayCircle,\r\n  faStopCircle,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"../css/node.css\";\r\n\r\nclass Node extends Component {\r\n  state = {};\r\n\r\n  handleClass = () => {\r\n    const { isStart, isEnd, isBarrier, isCheckpoint, isWeight } = this.props;\r\n    if (isStart) return \"node start\";\r\n    if (isEnd) return \"node end\";\r\n    if (isBarrier) return \"node barrier\";\r\n    if (isWeight) return \"node weight\";\r\n    if (isCheckpoint) return \"node checkpoint\";\r\n    return \"node default\";\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      isStart,\r\n      isEnd,\r\n      isCheckpoint,\r\n      checkpointNumber,\r\n      isWeight,\r\n      weight,\r\n      onMouseDown,\r\n      onMouseUp,\r\n      onMouseEnter,\r\n    } = this.props;\r\n    return (\r\n      <td\r\n        className={this.handleClass()}\r\n        id={id}\r\n        onMouseDown={(e) => onMouseDown(e, id)}\r\n        onMouseUp={(e) => onMouseUp()}\r\n        onMouseEnter={(e) => onMouseEnter(id)}\r\n        onContextMenu={(e) => e.preventDefault()}\r\n      >\r\n        {isStart && <FontAwesomeIcon icon={faPlayCircle} />}\r\n        {isEnd && <FontAwesomeIcon icon={faStopCircle} />}\r\n        {isCheckpoint && (\r\n          <span className=\"fa-layers\">\r\n            <span className={\"fa-layers-text checkpoint-label\"}>\r\n              {checkpointNumber.toString()}\r\n            </span>\r\n            <FontAwesomeIcon icon={faCircle} />\r\n          </span>\r\n        )}\r\n        {isWeight && (\r\n          <span className=\"fa-layers\">\r\n            <span className={\"fa-layers-text weight-label\"}>\r\n              {weight.toString()}\r\n            </span>\r\n            <FontAwesomeIcon icon={faWeightHanging} />\r\n          </span>\r\n        )}\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","function mapGrid(grid) {\r\n  return grid.map((row) => {\r\n    return row.map((node) => {\r\n      if (node.isBarrier) {\r\n        return {\r\n          ...node,\r\n          visited: true,\r\n          distanceToStart: node.isStart ? 0 : Infinity,\r\n          prevNode: {\r\n            row: NaN,\r\n            column: NaN,\r\n          },\r\n        };\r\n      }\r\n      return {\r\n        ...node,\r\n        visited: false,\r\n        distanceToStart: node.isStart ? 0 : Infinity,\r\n        prevNode: {\r\n          row: NaN,\r\n          column: NaN,\r\n        },\r\n      };\r\n    });\r\n  });\r\n}\r\n\r\nfunction findClosestUnvisited(grid) {\r\n  const dimensions = {\r\n    row: grid.length,\r\n    column: grid[0].length,\r\n  };\r\n\r\n  let closestUnvisited = { distanceToStart: Infinity };\r\n\r\n  for (let row = 0; row < dimensions.row; row++) {\r\n    for (let column = 0; column < dimensions.column; column++) {\r\n      if (!grid[row][column].visited) {\r\n        if (\r\n          grid[row][column].distanceToStart < closestUnvisited.distanceToStart\r\n        ) {\r\n          closestUnvisited = grid[row][column];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return closestUnvisited;\r\n}\r\n\r\nfunction findUnvisitedNeighbors(currentNode, grid) {\r\n  let neighbors = [];\r\n  if (grid[currentNode.location.row + 1]) {\r\n    if (\r\n      !grid[currentNode.location.row + 1][currentNode.location.column].visited\r\n    ) {\r\n      neighbors.push(\r\n        grid[currentNode.location.row + 1][currentNode.location.column]\r\n      );\r\n    }\r\n  }\r\n  if (grid[currentNode.location.row][currentNode.location.column + 1]) {\r\n    if (\r\n      !grid[currentNode.location.row][currentNode.location.column + 1].visited\r\n    ) {\r\n      neighbors.push(\r\n        grid[currentNode.location.row][currentNode.location.column + 1]\r\n      );\r\n    }\r\n  }\r\n  if (grid[currentNode.location.row - 1]) {\r\n    if (\r\n      !grid[currentNode.location.row - 1][currentNode.location.column].visited\r\n    ) {\r\n      neighbors.push(\r\n        grid[currentNode.location.row - 1][currentNode.location.column]\r\n      );\r\n    }\r\n  }\r\n  if (grid[currentNode.location.row][currentNode.location.column - 1]) {\r\n    if (\r\n      !grid[currentNode.location.row][currentNode.location.column - 1].visited\r\n    ) {\r\n      neighbors.push(\r\n        grid[currentNode.location.row][currentNode.location.column - 1]\r\n      );\r\n    }\r\n  }\r\n  return neighbors;\r\n}\r\n\r\nexport function dijkstra(grid) {\r\n  let dijkstraGrid = mapGrid(grid);\r\n\r\n  let visitedNodes = [];\r\n  let currentNode = { isEnd: false };\r\n  while (!currentNode.isEnd) {\r\n    currentNode = findClosestUnvisited(dijkstraGrid);\r\n    if (currentNode.distanceToStart === Infinity) {\r\n      return { shortestPath: [], visitedNodes };\r\n    }\r\n    currentNode.visited = true;\r\n    // console.log(currentNode);\r\n\r\n    const unvisitedNeighbors = findUnvisitedNeighbors(\r\n      currentNode,\r\n      dijkstraGrid\r\n    );\r\n    // console.log(neighbors);\r\n\r\n    for (let neighbor of unvisitedNeighbors) {\r\n      const newDistance = currentNode.distanceToStart + neighbor.weight;\r\n      if (newDistance < neighbor.distanceToStart) {\r\n        neighbor.distanceToStart = newDistance;\r\n        neighbor.prevNode = currentNode;\r\n      }\r\n      dijkstraGrid[neighbor.location.row][neighbor.location.column] = neighbor;\r\n    }\r\n\r\n    dijkstraGrid[currentNode.location.row][\r\n      currentNode.location.column\r\n    ] = currentNode;\r\n    visitedNodes.push([{ id: currentNode.id }]);\r\n  }\r\n\r\n  // const startNode = findStart(dijkstraGrid);\r\n\r\n  // const endNode = currentNode;\r\n\r\n  let shortestPath = [];\r\n\r\n  while (!currentNode.isStart) {\r\n    shortestPath.unshift([{ id: currentNode.id }]);\r\n    currentNode = currentNode.prevNode;\r\n  }\r\n  shortestPath.unshift([{ id: currentNode.id }]);\r\n\r\n  // console.log(shortestPath);\r\n  // console.log(visitedNodes);\r\n\r\n  return { shortestPath, visitedNodes };\r\n}\r\n\r\nexport function findStart(grid) {\r\n  const dimensions = {\r\n    row: grid.length,\r\n    column: grid[0].length,\r\n  };\r\n\r\n  for (let r = 0; r < dimensions.row; r++) {\r\n    for (let c = 0; c < dimensions.column; c++) {\r\n      if (grid[r][c].isStart) {\r\n        return grid[r][c];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function findEnd(grid) {\r\n  const dimensions = {\r\n    row: grid.length,\r\n    column: grid[0].length,\r\n  };\r\n\r\n  for (let r = 0; r < dimensions.row; r++) {\r\n    for (let c = 0; c < dimensions.column; c++) {\r\n      if (grid[r][c].isEnd) {\r\n        return grid[r][c];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction createNewGrid(grid) {\r\n  let newGrid = [];\r\n  for (let r = 0; r < grid.length; r++) {\r\n    let newRow = [];\r\n    for (let c = 0; c < grid[0].length; c++) {\r\n      newRow.push({\r\n        id: r.toString() + \"-\" + c.toString(),\r\n        location: { row: r, column: c },\r\n        weight: grid[r][c].weight,\r\n        isStart: false,\r\n        isEnd: false,\r\n        isBarrier: grid[r][c].isBarrier,\r\n        isCheckpoint: false,\r\n        isWeight: grid[r][c].isWeight,\r\n      });\r\n    }\r\n    newGrid.push(newRow);\r\n  }\r\n  return newGrid;\r\n}\r\n\r\nexport function dijkstraCheckpoints(grid, checkpoints) {\r\n  const start = findStart(grid);\r\n  const end = findEnd(grid);\r\n\r\n  let shortestPath = [];\r\n  let visitedNodes = [];\r\n\r\n  for (let c = 0; c <= checkpoints.length; c++) {\r\n    const newGrid = createNewGrid(grid);\r\n    if (c === 0) {\r\n      newGrid[start.location.row][start.location.column].isStart = true;\r\n      newGrid[checkpoints[c].location.row][\r\n        checkpoints[c].location.column\r\n      ].isEnd = true;\r\n      let { shortestPath: short, visitedNodes: visited } = dijkstra(newGrid);\r\n      // console.log(short);\r\n      shortestPath.push(...short);\r\n      visitedNodes.push(...visited);\r\n    } else if (c === checkpoints.length) {\r\n      newGrid[checkpoints[c - 1].location.row][\r\n        checkpoints[c - 1].location.column\r\n      ].isStart = true;\r\n      newGrid[end.location.row][end.location.column].isEnd = true;\r\n      let { shortestPath: short, visitedNodes: visited } = dijkstra(newGrid);\r\n      short.splice(0, 1);\r\n      shortestPath.push(...short);\r\n      visitedNodes.push(...visited);\r\n    } else {\r\n      newGrid[checkpoints[c - 1].location.row][\r\n        checkpoints[c - 1].location.column\r\n      ].isStart = true;\r\n      newGrid[checkpoints[c].location.row][\r\n        checkpoints[c].location.column\r\n      ].isEnd = true;\r\n      let { shortestPath: short, visitedNodes: visited } = dijkstra(newGrid);\r\n      short.splice(0, 1);\r\n      shortestPath.push(...short);\r\n      visitedNodes.push(...visited);\r\n    }\r\n  }\r\n  return { shortestPath, visitedNodes };\r\n}\r\n","export function animateNodes(currentNodes, style, interval) {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      for (const node of currentNodes) {\r\n        let element = document.getElementById(node.id);\r\n        if (element.classList.contains(style)) {\r\n          element.classList.remove(style);\r\n          void element.offsetWidth;\r\n          //   element.classList.add(style);\r\n          // } else {\r\n          //   element.className = style;\r\n          // }\r\n        }\r\n        element.classList.add(style);\r\n      }\r\n      resolve(true);\r\n    }, interval);\r\n  });\r\n}\r\n\r\n// export function animateDijkstra(visitedNodes) {\r\n//   return new Promise((resolve, reject) => {\r\n//     for (let n = 0; n < visitedNodes.length; n++) {\r\n//       setTimeout(() => {\r\n//         const node = visitedNodes[n];\r\n//         document.getElementById(node.id).className = \"node visited\";\r\n//       }, 10 * n);\r\n//     }\r\n//     setTimeout(() => {\r\n//       resolve(true);\r\n//     }, 10 * visitedNodes.length);\r\n//   });\r\n// }\r\n\r\n// export function animateShortestPath(shortestPath) {\r\n//   return new Promise((resolve, reject) => {\r\n//     for (let n = shortestPath.length - 1; n >= 0; n--) {\r\n//       setTimeout(() => {\r\n//         const node = shortestPath[n];\r\n//         document.getElementById(node.id).className = \"node shortest-path\";\r\n//       }, 40 * (shortestPath.length - n - 1));\r\n//     }\r\n//     setTimeout(() => {\r\n//       resolve(true);\r\n//     }, 10 * shortestPath.length);\r\n//   });\r\n// }\r\n","import React, { Component } from \"react\";\r\nimport Controlbar from \"./controlbar\";\r\nimport Node from \"./node\";\r\nimport {\r\n  dijkstra,\r\n  dijkstraCheckpoints,\r\n  findStart,\r\n  findEnd,\r\n} from \"../algorithms/dijkstra\";\r\nimport { animateNodes } from \"../algorithms/animate\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"../css/pathfinder.css\";\r\n\r\nvar assert = require(\"assert\");\r\n\r\nclass Pathfinder extends Component {\r\n  state = {\r\n    grid: [],\r\n    start: {\r\n      row: 10,\r\n      column: 20,\r\n    },\r\n    end: {\r\n      row: 10,\r\n      column: 40,\r\n    },\r\n    algorithm: \"dijkstra\",\r\n    algorithms: [\"dijkstra\", \"algorithm 1\", \"algorithm 2\", \"algorithm 3\"],\r\n    animateState: false,\r\n    animateCompletion: 1, //1 for not started, 2 for algorithm animated started, 3 for shortestpath started, 4 for completed\r\n    visitedNodes: [],\r\n    shortestPath: [],\r\n    algorithmIndex: 0,\r\n    shortestPathIndex: 0,\r\n    checkpoints: [],\r\n    selectedAddon: \"barriers\",\r\n    selectedWeight: 5,\r\n    mouse: { down: false, button: NaN, onStart: false, onEnd: false },\r\n  };\r\n\r\n  dimensions = {\r\n    //if these values are to be modified, change node.css dimensions to match\r\n    row: 21,\r\n    column: 60,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const grid = this.generateGrid(this.dimensions);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  isStart = (row, column) => {\r\n    const { start } = this.state;\r\n\r\n    if (start.row === row && start.column === column) return true;\r\n    return false;\r\n  };\r\n\r\n  isEnd = (row, column) => {\r\n    const { end } = this.state;\r\n\r\n    if (end.row === row && end.column === column) return true;\r\n    return false;\r\n  };\r\n\r\n  generateGrid({ row, column }) {\r\n    let grid = [];\r\n\r\n    for (let r = 0; r < row; r++) {\r\n      let currentRow = [];\r\n\r\n      for (let c = 0; c < column; c++) {\r\n        currentRow.push({\r\n          id: r.toString() + \"-\" + c.toString(),\r\n          location: { row: r, column: c },\r\n          weight: 1,\r\n          isStart: this.isStart(r, c),\r\n          isEnd: this.isEnd(r, c),\r\n          isBarrier: false,\r\n          isCheckpoint: false,\r\n          checkpointNumber: NaN,\r\n          isWeight: false,\r\n        });\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n\r\n    return grid;\r\n  }\r\n\r\n  renderContainer = (grid) => {\r\n    return (\r\n      <table className=\"node-grid\" onMouseLeave={() => this.handleMouseUp()}>\r\n        <tbody>{this.renderNodes(grid)}</tbody>\r\n      </table>\r\n    );\r\n  };\r\n\r\n  renderNodes = (grid) => {\r\n    return grid.map((row, rowIndex) => {\r\n      return (\r\n        <tr className=\"node-row\" key={rowIndex} id={rowIndex}>\r\n          {row.map((node) => {\r\n            return (\r\n              <Node\r\n                key={node.id}\r\n                id={node.id}\r\n                location={node.location}\r\n                weight={node.weight}\r\n                isStart={node.isStart}\r\n                isEnd={node.isEnd}\r\n                isBarrier={node.isBarrier}\r\n                isCheckpoint={node.isCheckpoint}\r\n                checkpointNumber={node.checkpointNumber}\r\n                isWeight={node.isWeight}\r\n                onMouseDown={this.handleMouseDown}\r\n                onMouseUp={this.handleMouseUp}\r\n                onMouseEnter={this.handleMouseEnter}\r\n              />\r\n            );\r\n          })}\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n\r\n  runAlgorithm = (algorithm, grid, checkpoints) => {\r\n    if (algorithm === \"dijkstra\") {\r\n      if (checkpoints.length === 0) {\r\n        return dijkstra(grid);\r\n      } else {\r\n        return dijkstraCheckpoints(grid, checkpoints);\r\n      }\r\n      // console.log(dijkstraCheckpoints(grid, checkpoints));\r\n      // return dijkstraCheckpoints(grid, checkpoints);\r\n      // return dijkstra(grid);\r\n    }\r\n  };\r\n\r\n  animateAlgorithms = async (\r\n    animateCompletion,\r\n    visitedNodes,\r\n    shortestPath,\r\n    algorithmIndex,\r\n    shortestPathIndex\r\n  ) => {\r\n    //needed in this file since function does state checking through every iteration\r\n\r\n    let localCompletion = animateCompletion;\r\n\r\n    let aIndex = algorithmIndex;\r\n    let aStateChecker = localCompletion === 2 ? true : false;\r\n    while (aStateChecker) {\r\n      // await animateNodes(visitedNodes[aIndex], \"node visited\", 10);\r\n      let animateNodesBind = animateNodes.bind(this);\r\n      await animateNodesBind(visitedNodes[aIndex], \"visited\", 10);\r\n      aIndex++;\r\n      aStateChecker = this.state.animateState;\r\n      if (aIndex === visitedNodes.length) {\r\n        aStateChecker = false;\r\n        localCompletion = 3;\r\n      }\r\n    }\r\n\r\n    let sIndex = 0;\r\n    if (shortestPath.length > 0) {\r\n      sIndex = shortestPathIndex;\r\n      let sStateChecker = localCompletion === 3 ? true : false;\r\n      while (sStateChecker) {\r\n        // await animateNodes(shortestPath[sIndex], \"node shortest-path\", 40);\r\n        let animateNodesBind = animateNodes.bind(this);\r\n        await animateNodesBind(shortestPath[sIndex], \"shortest-path\", 40);\r\n        sIndex++;\r\n        sStateChecker = this.state.animateState;\r\n        if (sIndex === shortestPath.length) {\r\n          localCompletion = 4;\r\n          console.log(\"Completed\");\r\n          sStateChecker = false;\r\n        }\r\n      }\r\n    }\r\n    this.setState({\r\n      algorithmIndex: aIndex,\r\n      shortestPathIndex: sIndex,\r\n      animateCompletion: localCompletion,\r\n      animateState: false,\r\n    });\r\n  };\r\n\r\n  handleVisualize = async () => {\r\n    const {\r\n      animateState,\r\n      animateCompletion,\r\n      grid,\r\n      algorithm,\r\n      shortestPathIndex,\r\n      algorithmIndex,\r\n      checkpoints,\r\n    } = this.state;\r\n    assert(animateState === false && animateCompletion === 1);\r\n    this.setState({ animateState: true, animateCompletion: 2 });\r\n\r\n    const { shortestPath, visitedNodes } = this.runAlgorithm(\r\n      algorithm,\r\n      grid,\r\n      checkpoints\r\n    );\r\n    // console.log(visitedNodes);\r\n    // console.log(shortestPath);\r\n\r\n    if (shortestPath.length === 0) {\r\n      toast.error(\"No path to destination was found...\");\r\n    }\r\n\r\n    this.setState({ shortestPath, visitedNodes });\r\n\r\n    console.log(\"Initiating\");\r\n\r\n    await this.animateAlgorithms(\r\n      2,\r\n      visitedNodes,\r\n      shortestPath,\r\n      algorithmIndex,\r\n      shortestPathIndex\r\n    );\r\n  };\r\n\r\n  handlePausePlay = async () => {\r\n    const {\r\n      animateState,\r\n      animateCompletion,\r\n      shortestPath,\r\n      visitedNodes,\r\n      shortestPathIndex,\r\n      algorithmIndex,\r\n    } = this.state;\r\n    assert(animateCompletion === 2 || animateCompletion === 3);\r\n\r\n    let newState = !animateState;\r\n    this.setState({ animateState: newState });\r\n\r\n    if (newState === true) {\r\n      console.log(\"Resuming\");\r\n      await this.animateAlgorithms(\r\n        animateCompletion,\r\n        visitedNodes,\r\n        shortestPath,\r\n        algorithmIndex,\r\n        shortestPathIndex\r\n      );\r\n    } else {\r\n      console.log(\"Paused\");\r\n    }\r\n  };\r\n\r\n  handleReset = () => {\r\n    const { animateCompletion, grid } = this.state;\r\n\r\n    // assert(animateCompletion !== 1);\r\n    this.setState({ animateState: false }); //stops animation\r\n    setTimeout(() => {\r\n      //resets everything\r\n      for (let nodes of grid) {\r\n        for (let node of nodes) {\r\n          if (node.isStart) {\r\n            document.getElementById(node.id).className = \"node start\";\r\n          } else if (node.isEnd) {\r\n            document.getElementById(node.id).className = \"node end\";\r\n          } else if (node.isBarrier) {\r\n            document.getElementById(node.id).className = \"node barrier\";\r\n          } else if (node.isCheckpoint) {\r\n            document.getElementById(node.id).className = \"node checkpoint\";\r\n          } else if (node.isWeight) {\r\n            document.getElementById(node.id).className = \"node weight\";\r\n          } else {\r\n            document.getElementById(node.id).className = \"node default\";\r\n          }\r\n        }\r\n      }\r\n      this.setState({\r\n        animateCompletion: 1,\r\n        algorithmIndex: 0,\r\n        shortestPathIndex: 0,\r\n        visitedNodes: [],\r\n        shortestPath: [],\r\n      });\r\n      console.log(\"Terminated\");\r\n    }, 11);\r\n  };\r\n\r\n  handleAlgorithmSelect = (algorithm) => {\r\n    this.setState({ algorithm });\r\n    this.handleReset();\r\n  };\r\n\r\n  handleAddonSelect = (addon) => {\r\n    this.setState({ selectedAddon: addon });\r\n  };\r\n\r\n  clearGridBySelection = (selection, grid) => {\r\n    let newGrid = grid;\r\n    for (let row of newGrid) {\r\n      for (let node of row) {\r\n        node[selection] = false;\r\n        if (selection === \"isCheckpoint\") {\r\n          node.checkpointNumber = NaN;\r\n        } else if (selection === \"isWeight\") {\r\n          node.weight = 1;\r\n        }\r\n        console.log(\"changed\");\r\n      }\r\n    }\r\n    console.log(newGrid);\r\n    return newGrid;\r\n  };\r\n\r\n  handleClear = (clear) => {\r\n    const { grid, animateCompletion } = this.state;\r\n    if (animateCompletion !== 1) {\r\n      return toast.error(\r\n        \"Please reset or wait for visualization to complete before clearing :)\"\r\n      );\r\n    }\r\n    let newGrid = [];\r\n    if (clear === \"board\") {\r\n      newGrid = this.generateGrid(this.dimensions);\r\n    } else if (clear === \"barriers\") {\r\n      newGrid = this.clearGridBySelection(\"isBarrier\", grid);\r\n    } else if (clear === \"weights\") {\r\n      newGrid = this.clearGridBySelection(\"isWeight\", grid);\r\n    } else if (clear === \"checkpoints\") {\r\n      newGrid = this.clearGridBySelection(\"isCheckpoint\", grid);\r\n      this.setState({ checkpoints: [] });\r\n    } else {\r\n      return toast.error(\"There was an error with clearing your selection :(\");\r\n    }\r\n    this.setState({ grid: newGrid });\r\n  };\r\n\r\n  findNode = (nodeId, grid) => {\r\n    const dimensions = {\r\n      row: grid.length,\r\n      column: grid[0].length,\r\n    };\r\n\r\n    for (let r = 0; r < dimensions.row; r++) {\r\n      for (let c = 0; c < dimensions.column; c++) {\r\n        if (grid[r][c].id === nodeId) {\r\n          return grid[r][c];\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  toggleNode = (button, nodeId) => {\r\n    const { grid, selectedAddon, selectedWeight, checkpoints } = this.state;\r\n    let newGrid = grid;\r\n\r\n    const preIndex = nodeId.split(\"-\");\r\n    let indexArray = [];\r\n    for (const element of preIndex) {\r\n      indexArray.push(parseInt(element));\r\n    }\r\n    let node = newGrid[indexArray[0]][indexArray[1]];\r\n\r\n    let newCheckpoints = checkpoints;\r\n    if (button === 0) {\r\n      if (\r\n        !node.isStart &&\r\n        !node.isEnd &&\r\n        !node.isWeight &&\r\n        !node.isCheckpoint &&\r\n        !node.isBarrier\r\n      ) {\r\n        if (selectedAddon === \"barriers\") {\r\n          node.isBarrier = true;\r\n        } else if (selectedAddon === \"weights\") {\r\n          node.isWeight = true;\r\n          node.weight = selectedWeight;\r\n        } else if (selectedAddon === \"checkpoints\") {\r\n          newCheckpoints.push(node);\r\n          node.checkpointNumber = newCheckpoints.length;\r\n          node.isCheckpoint = true;\r\n        }\r\n      }\r\n    } else if (button === 2) {\r\n      node.isBarrier = false;\r\n      node.isCheckpoint = false;\r\n      const index = checkpoints.findIndex(\r\n        (checkpoint) => checkpoint.id === node.id\r\n      );\r\n      if (index !== -1) {\r\n        newCheckpoints.splice(index, 1);\r\n        let cNumber = 1;\r\n        for (let checkpoint of newCheckpoints) {\r\n          const checkpointNode = this.findNode(checkpoint.id, newGrid);\r\n          newGrid[checkpointNode.location.row][\r\n            checkpointNode.location.column\r\n          ].checkpointNumber = cNumber;\r\n          cNumber++;\r\n        }\r\n      }\r\n      node.checkpointNumber = NaN;\r\n      node.isWeight = false;\r\n      node.weight = 1;\r\n    }\r\n\r\n    newGrid[indexArray[0]][indexArray[1]] = node;\r\n    this.setState({ grid: newGrid, checkpoints: newCheckpoints });\r\n  };\r\n\r\n  findNodeRef = (nodeId, grid) => {\r\n    const dimensions = {\r\n      row: grid.length,\r\n      column: grid[0].length,\r\n    };\r\n\r\n    for (let r = 0; r < dimensions.row; r++) {\r\n      for (let c = 0; c < dimensions.column; c++) {\r\n        if (grid[r][c].id === nodeId) {\r\n          return { r, c };\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  moveStart = (oldNode, newNode, grid) => {\r\n    let newNodeClone = newNode;\r\n    let oldNodeClone = oldNode;\r\n    let oldNodeRef = this.findNodeRef(oldNode.id, grid);\r\n    let newNodeRef = this.findNodeRef(newNode.id, grid);\r\n    let newGrid = grid;\r\n    if (\r\n      !(\r\n        newNode.isBarrier ||\r\n        newNode.isCheckpoint ||\r\n        newNode.isWeight ||\r\n        newNode.isEnd\r\n      )\r\n    ) {\r\n      newNodeClone.isStart = true;\r\n      oldNodeClone.isStart = false;\r\n      newGrid[oldNodeRef.r][oldNodeRef.c] = oldNodeClone;\r\n      newGrid[newNodeRef.r][newNodeRef.c] = newNodeClone;\r\n    }\r\n    return { newGrid, newNodeClone };\r\n  };\r\n\r\n  moveEnd = (oldNode, newNode, grid) => {\r\n    let newNodeClone = newNode;\r\n    let oldNodeClone = oldNode;\r\n    let oldNodeRef = this.findNodeRef(oldNode.id, grid);\r\n    let newNodeRef = this.findNodeRef(newNode.id, grid);\r\n    let newGrid = grid;\r\n    if (\r\n      !(\r\n        newNode.isBarrier ||\r\n        newNode.isCheckpoint ||\r\n        newNode.isWeight ||\r\n        newNode.isStart\r\n      )\r\n    ) {\r\n      newNodeClone.isEnd = true;\r\n      oldNodeClone.isEnd = false;\r\n      newGrid[oldNodeRef.r][oldNodeRef.c] = oldNodeClone;\r\n      newGrid[newNodeRef.r][newNodeRef.c] = newNodeClone;\r\n    }\r\n    return { newGrid, newNodeClone };\r\n  };\r\n\r\n  handleMouseDown = (e, nodeId) => {\r\n    const { animateCompletion } = this.state;\r\n    if (animateCompletion !== 1) {\r\n      return toast.error(\r\n        \"Please reset or clear the board before making changes!\"\r\n      );\r\n    }\r\n    let mouse = {\r\n      down: true,\r\n      button: e.button,\r\n      onStart: false,\r\n      onEnd: false,\r\n    };\r\n    const { start, end } = this.state;\r\n    if (nodeId === start.row.toString() + \"-\" + start.column.toString()) {\r\n      mouse.onStart = true;\r\n    } else if (nodeId === end.row.toString() + \"-\" + end.column.toString()) {\r\n      mouse.onEnd = true;\r\n    } else {\r\n      this.toggleNode(e.button, nodeId);\r\n    }\r\n    this.setState({ mouse });\r\n  };\r\n\r\n  handleMouseEnter = (nodeId) => {\r\n    const { mouse, grid } = this.state;\r\n\r\n    if (mouse.down) {\r\n      if (mouse.onStart) {\r\n        const newNode = this.findNode(nodeId, grid);\r\n        const start = findStart(grid);\r\n        const { newGrid, newNodeClone } = this.moveStart(start, newNode, grid);\r\n        this.setState({\r\n          grid: newGrid,\r\n          start: {\r\n            row: newNodeClone.location.row,\r\n            column: newNodeClone.location.column,\r\n          },\r\n        });\r\n      } else if (mouse.onEnd) {\r\n        const newNode = this.findNode(nodeId, grid);\r\n        const end = findEnd(grid);\r\n        const { newGrid, newNodeClone } = this.moveEnd(end, newNode, grid);\r\n        this.setState({\r\n          grid: newGrid,\r\n          end: {\r\n            row: newNodeClone.location.row,\r\n            column: newNodeClone.location.column,\r\n          },\r\n        });\r\n      } else {\r\n        this.toggleNode(mouse.button, nodeId);\r\n      }\r\n    }\r\n  };\r\n\r\n  handleMouseUp = () => {\r\n    const mouse = {\r\n      down: false,\r\n      button: NaN,\r\n      onStart: false,\r\n      onEnd: false,\r\n    };\r\n    this.setState({ mouse });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      grid,\r\n      animateState,\r\n      animateCompletion,\r\n      algorithm,\r\n      algorithms,\r\n      selectedAddon,\r\n    } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <Controlbar\r\n          onVisualize={this.handleVisualize}\r\n          onPause={this.handlePausePlay}\r\n          onReset={this.handleReset}\r\n          animateState={animateState}\r\n          animateCompletion={animateCompletion}\r\n          algorithm={algorithm}\r\n          algorithms={algorithms.filter((a) => a !== algorithm)}\r\n          onAlgorithmSelect={this.handleAlgorithmSelect}\r\n          onAddonSelect={this.handleAddonSelect}\r\n          selectedAddon={selectedAddon}\r\n          onClear={this.handleClear}\r\n        />\r\n        <div>{this.renderContainer(grid)}</div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pathfinder;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faWeightHanging,\r\n  faCircle,\r\n  faPlayCircle,\r\n  faStopCircle,\r\n  faSquareFull,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"../css/infoMenu.css\";\r\n\r\nconst InfoMenu = () => {\r\n  return (\r\n    <div className=\"info-menu\">\r\n      <div className=\"legend\">\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon icon={faPlayCircle} size=\"2x\" />\r\n          <p className=\"legend-item-label\">Start</p>\r\n        </div>\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon icon={faStopCircle} size=\"2x\" />\r\n          <p className=\"legend-item-label\">End</p>\r\n        </div>\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon\r\n            icon={faSquareFull}\r\n            className=\"barrier-icon\"\r\n            size=\"2x\"\r\n          />\r\n          <p className=\"legend-item-label\">Barrier</p>\r\n        </div>\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon\r\n            icon={faWeightHanging}\r\n            size=\"2x\"\r\n            className=\"weight-icon\"\r\n          />\r\n          <p className=\"legend-item-label\">Weight</p>\r\n        </div>\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon\r\n            icon={faCircle}\r\n            size=\"2x\"\r\n            className=\"checkpoint-icon\"\r\n          />\r\n          <p className=\"legend-item-label\">Checkpoint</p>\r\n        </div>\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon\r\n            icon={faSquareFull}\r\n            className=\"visited-icon\"\r\n            size=\"2x\"\r\n          />\r\n          <p className=\"legend-item-label\">Visited</p>\r\n        </div>\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon\r\n            icon={faSquareFull}\r\n            className=\"shortest-path-icon\"\r\n            size=\"2x\"\r\n          />\r\n          <p className=\"legend-item-label\">Shortest Path</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"quick-guide\">\r\n        <h2 className=\"header\">Quick Guide</h2>\r\n        <table className=\"menu-table\">\r\n          <tr>\r\n            <td className=\"table-column\">\r\n              <div className=\"list-item\">\r\n                <p className=\"list-item-label\">\r\n                  Select an algorithm along the top left and click visualize!\r\n                </p>\r\n                <div className=\"content-separator\" />\r\n              </div>\r\n\r\n              <div className=\"list-item\">\r\n                <p className=\"list-item-label\">\r\n                  Select an addon on the top right and left click/drag along the\r\n                  board to add addons.\r\n                </p>\r\n                <div className=\"content-separator\" />\r\n              </div>\r\n              <div className=\"list-item\">\r\n                <p className=\"list-item-label\">\r\n                  Right click/drag along the board to remove any addons.\r\n                </p>\r\n              </div>\r\n            </td>\r\n            <td className=\"table-column\">\r\n              <div className=\"list-item\">\r\n                <p className=\"list-item-label\">\r\n                  Click reset to change the board or perform another\r\n                  visualization.\r\n                </p>\r\n                <div className=\"content-separator\" />\r\n              </div>\r\n              <div className=\"list-item\">\r\n                <p className=\"list-item-label\">\r\n                  Click and drag the start and end nodes to move the starting\r\n                  and ending points of the visualization.\r\n                </p>\r\n                <div className=\"content-separator\" />\r\n              </div>\r\n              <div className=\"list-item\">\r\n                <p className=\"list-item-label\">\r\n                  While visualizing, changing the board will be disabled. Click\r\n                  reset to make any changes.\r\n                </p>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoMenu;\r\n","import React, { Component } from \"react\";\nimport Pathfinder from \"./pathfinder\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"../css/App.css\";\nimport InfoMenu from \"./infoMenu\";\n\nclass App extends Component {\n  state = {};\n\n  render() {\n    return (\n      <React.Fragment>\n        <ToastContainer />\n        <Pathfinder />\n        <InfoMenu />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap.js\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}