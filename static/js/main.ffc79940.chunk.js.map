{"version":3,"sources":["components/controlbar.jsx","components/node.jsx","utils/animate.js","utils/reset.js","utils/clear.js","utils/nodeFinding.js","utils/nodeChanging.js","utils/onMouseChange.js","algorithms/dijkstra.js","utils/runAlgorithm.js","components/pathfinder.jsx","utils/generateGrid.js","components/infoMenu.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["Controlbar","renderTitle","style","display","justifyContent","alignItems","flexDirection","marginRight","marginLeft","fontSize","marginBottom","marginTop","renderAlgorithms","props","algorithm","algorithms","onAlgorithmSelect","animateCompletion","algorithmsArray","push","Button","key","className","onClick","disabled","charAt","toUpperCase","slice","Fragment","color","id","role","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","padding","margin","border","renderControlButtons","onVisualize","onPause","onReset","animateState","animated","Content","visible","Icon","name","hidden","renderAddons","onAddonSelect","selectedAddon","Group","active","renderClearDropdown","onClear","state","this","Component","Node","handleClass","isStart","isEnd","isBarrier","isCheckpoint","isWeight","checkpointNumber","weight","onMouseDown","onMouseUp","onMouseEnter","e","onContextMenu","preventDefault","icon","faPlayCircle","faStopCircle","toString","faCircle","faWeightHanging","animateNodes","currentNodes","interval","Promise","resolve","reject","setTimeout","node","element","document","getElementById","classList","contains","remove","offsetWidth","add","reset","grid","nodes","clear","clearSelection","newGrid","selection","count","clearGridBySelection","row","NaN","findNode","nodeId","dimensions","length","r","c","findNodeRef","findStart","findEnd","toggleNode","button","selectedWeight","checkpoints","preIndex","split","indexArray","parseInt","newCheckpoints","index","findIndex","checkpoint","splice","cNumber","checkpointNode","location","column","mouseDown","mouse","down","onStart","onEnd","start","end","mouseEnter","newNodeClone","changedNode","newNode","oldNode","oldNodeClone","oldNodeRef","newNodeRef","moveStart","moveEnd","findClosestUnvisited","closestUnvisited","distanceToStart","Infinity","visited","findUnvisitedNeighbors","currentNode","neighbors","dijkstra","dijkstraGrid","map","prevNode","mapGrid","visitedNodes","shortestPath","unvisitedNeighbors","neighbor","newDistance","unshift","createNewGrid","newRow","runAlgorithm","short","dijkstraCheckpoints","assert","require","Pathfinder","algorithmIndex","shortestPathIndex","renderContainer","onMouseLeave","handleMouseUp","renderNodes","rowIndex","handleMouseDown","handleMouseEnter","animateAlgorithms","a","aIndex","aStateChecker","localCompletion","animateNodesBind","bind","sIndex","sStateChecker","console","log","setState","handleVisualize","toast","error","handlePausePlay","newState","handleReset","handleAlgorithmSelect","handleAddonSelect","addon","handleClear","currentRow","generateGrid","filter","InfoMenu","size","faSquareFull","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ffc79940.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Icon } from \"semantic-ui-react\";\r\n\r\nclass Controlbar extends Component {\r\n  renderTitle = () => {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          flexDirection: \"column\",\r\n          marginRight: \"50px\",\r\n          marginLeft: \"35px\",\r\n        }}\r\n      >\r\n        <p style={{ fontSize: \"30px\", marginBottom: \"5px\", marginTop: \"5px\" }}>\r\n          Pathfind\r\n        </p>\r\n        <p style={{ fontSize: \"15px\", marginBottom: \"5px\", marginTop: \"5px\" }}>\r\n          Visualization Tool\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderAlgorithms = () => {\r\n    const {\r\n      algorithm,\r\n      algorithms,\r\n      onAlgorithmSelect,\r\n      animateCompletion,\r\n    } = this.props;\r\n    let algorithmsArray = [];\r\n    for (const algorithm of algorithms) {\r\n      algorithmsArray.push(\r\n        <Button\r\n          key={algorithm}\r\n          className=\"dropdown-item\"\r\n          onClick={() => onAlgorithmSelect(algorithm)}\r\n          //will remove as algorithms are added\\\r\n          disabled\r\n        >\r\n          {algorithm.charAt(0).toUpperCase() + algorithm.slice(1)}\r\n        </Button>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <li className=\"nav-item\">\r\n          <p className=\"nav-link\" style={{ color: \"black\" }}>\r\n            Algorithm:\r\n          </p>\r\n        </li>\r\n        <li className=\"nav-item dropdown\">\r\n          <Button\r\n            className=\"nav-link dropdown-toggle\"\r\n            id=\"navbarDropdown\"\r\n            role=\"button\"\r\n            data-toggle=\"dropdown\"\r\n            aria-haspopup=\"true\"\r\n            aria-expanded=\"false\"\r\n            disabled={animateCompletion === 2 || animateCompletion === 3}\r\n          >\r\n            {algorithm.charAt(0).toUpperCase() + algorithm.slice(1)}\r\n          </Button>\r\n          <div\r\n            className=\"dropdown-menu\"\r\n            aria-labelledby=\"navbarDropdown\"\r\n            style={{\r\n              fontSize: \"15px\",\r\n              padding: \"0\",\r\n              margin: \"0\",\r\n              border: \"0px solid black\",\r\n            }}\r\n          >\r\n            {algorithmsArray}\r\n          </div>\r\n        </li>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  renderControlButtons = () => {\r\n    const {\r\n      onVisualize,\r\n      onPause,\r\n      onReset,\r\n      animateState,\r\n      animateCompletion,\r\n    } = this.props;\r\n    return (\r\n      <div className=\"m-auto align-items-center\">\r\n        <Button animated onClick={onReset} disabled={animateCompletion === 1}>\r\n          <Button.Content visible>\r\n            <Icon name=\"redo alternate\" />\r\n          </Button.Content>\r\n          <Button.Content hidden>Reset</Button.Content>\r\n        </Button>\r\n        <Button\r\n          color=\"purple\"\r\n          onClick={onVisualize}\r\n          disabled={animateCompletion !== 1}\r\n          animated\r\n        >\r\n          <Button.Content visible>Visualize!</Button.Content>\r\n          <Button.Content hidden>Visualize!</Button.Content>\r\n        </Button>\r\n        <Button\r\n          animated\r\n          onClick={onPause}\r\n          disabled={animateCompletion === 1 || animateCompletion === 4}\r\n        >\r\n          <Button.Content visible>\r\n            <Icon\r\n              name={\r\n                !animateState &&\r\n                animateCompletion !== 1 &&\r\n                animateCompletion !== 4\r\n                  ? \"play\"\r\n                  : \"pause\"\r\n              }\r\n            />\r\n          </Button.Content>\r\n          <Button.Content hidden>\r\n            {!animateState && animateCompletion !== 1 && animateCompletion !== 4\r\n              ? \"Play\"\r\n              : \"Pause\"}\r\n          </Button.Content>\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderAddons = () => {\r\n    const { onAddonSelect, selectedAddon } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <li className=\"nav-item\">\r\n          <p className=\"nav-link\" style={{ color: \"black\" }}>\r\n            Add-on Nodes:\r\n          </p>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Button.Group>\r\n            <Button\r\n              active={selectedAddon === \"barriers\"}\r\n              onClick={() => onAddonSelect(\"barriers\")}\r\n            >\r\n              Barrier\r\n            </Button>\r\n            <Button\r\n              active={selectedAddon === \"weights\"}\r\n              onClick={() => onAddonSelect(\"weights\")}\r\n            >\r\n              Weighted\r\n            </Button>\r\n            <Button\r\n              active={selectedAddon === \"checkpoints\"}\r\n              onClick={() => onAddonSelect(\"checkpoints\")}\r\n            >\r\n              Checkpoint\r\n            </Button>\r\n          </Button.Group>\r\n        </li>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  renderClearDropdown = () => {\r\n    const { onClear, animateCompletion } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <li\r\n          className=\"nav-item dropdown\"\r\n          style={{ marginLeft: \"50px\", marginRight: \"35px\" }}\r\n        >\r\n          <Button\r\n            className=\"nav-link dropdown-toggle\"\r\n            id=\"navbarDropdown\"\r\n            role=\"button\"\r\n            data-toggle=\"dropdown\"\r\n            aria-haspopup=\"true\"\r\n            aria-expanded=\"false\"\r\n            color=\"purple\"\r\n            disabled={animateCompletion !== 1}\r\n          >\r\n            Clear\r\n          </Button>\r\n          <div\r\n            className=\"dropdown-menu dropdown-menu-right\"\r\n            aria-labelledby=\"navbarDropdown\"\r\n            style={{\r\n              fontSize: \"15px\",\r\n              padding: \"0\",\r\n              margin: \"0\",\r\n              border: \"0px solid black\",\r\n            }}\r\n          >\r\n            <Button\r\n              className=\"dropdown-item\"\r\n              color=\"purple\"\r\n              onClick={() => onClear(\"board\")}\r\n            >\r\n              Clear Board\r\n            </Button>\r\n            <Button\r\n              className=\"dropdown-item\"\r\n              color=\"purple\"\r\n              onClick={() => onClear(\"barriers\")}\r\n            >\r\n              Clear Barriers\r\n            </Button>\r\n            <Button\r\n              className=\"dropdown-item\"\r\n              color=\"purple\"\r\n              onClick={() => onClear(\"weights\")}\r\n            >\r\n              Clear Weights\r\n            </Button>\r\n            <Button\r\n              className=\"dropdown-item\"\r\n              color=\"purple\"\r\n              onClick={() => onClear(\"checkpoints\")}\r\n            >\r\n              Clear Checkpoints\r\n            </Button>\r\n          </div>\r\n        </li>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        {this.renderTitle()}\r\n        <ul className=\"navbar-nav\" style={{ fontSize: \"15px\" }}>\r\n          {this.renderAlgorithms()}\r\n        </ul>\r\n        {this.renderControlButtons()}\r\n        <ul className=\"navbar-nav\" style={{ fontSize: \"15px\" }}>\r\n          {this.renderAddons()}\r\n          {this.renderClearDropdown()}\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Controlbar;\r\n","import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faWeightHanging,\r\n  faCircle,\r\n  faPlayCircle,\r\n  faStopCircle,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"../css/node.css\";\r\n\r\nclass Node extends Component {\r\n  state = {};\r\n\r\n  handleClass = () => {\r\n    const { isStart, isEnd, isBarrier, isCheckpoint, isWeight } = this.props;\r\n    if (isStart) return \"node start\";\r\n    if (isEnd) return \"node end\";\r\n    if (isBarrier) return \"node barrier\";\r\n    if (isWeight) return \"node weight\";\r\n    if (isCheckpoint) return \"node checkpoint\";\r\n    return \"node default\";\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      isStart,\r\n      isEnd,\r\n      isCheckpoint,\r\n      checkpointNumber,\r\n      isWeight,\r\n      weight,\r\n      onMouseDown,\r\n      onMouseUp,\r\n      onMouseEnter,\r\n    } = this.props;\r\n    return (\r\n      <td\r\n        className={this.handleClass()}\r\n        id={id}\r\n        onMouseDown={(e) => onMouseDown(e, id)}\r\n        onMouseUp={(e) => onMouseUp()}\r\n        onMouseEnter={(e) => onMouseEnter(id)}\r\n        onContextMenu={(e) => e.preventDefault()}\r\n      >\r\n        {isStart && <FontAwesomeIcon icon={faPlayCircle} />}\r\n        {isEnd && <FontAwesomeIcon icon={faStopCircle} />}\r\n        {isCheckpoint && (\r\n          <span className=\"fa-layers\">\r\n            <span className={\"fa-layers-text checkpoint-label\"}>\r\n              {checkpointNumber.toString()}\r\n            </span>\r\n            <FontAwesomeIcon icon={faCircle} />\r\n          </span>\r\n        )}\r\n        {isWeight && (\r\n          <span className=\"fa-layers\">\r\n            <span className={\"fa-layers-text weight-label\"}>\r\n              {weight.toString()}\r\n            </span>\r\n            <FontAwesomeIcon icon={faWeightHanging} />\r\n          </span>\r\n        )}\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","export function animateNodes(currentNodes, style, interval) {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      for (const node of currentNodes) {\r\n        let element = document.getElementById(node.id);\r\n        if (element.classList.contains(style)) {\r\n          element.classList.remove(style);\r\n          void element.offsetWidth;\r\n          //   element.classList.add(style);\r\n          // } else {\r\n          //   element.className = style;\r\n          // }\r\n        }\r\n        element.classList.add(style);\r\n      }\r\n      resolve(true);\r\n    }, interval);\r\n  });\r\n}\r\n","export function reset(grid) {\r\n  for (let nodes of grid) {\r\n    for (let node of nodes) {\r\n      if (node.isStart) {\r\n        document.getElementById(node.id).className = \"node start\";\r\n      } else if (node.isEnd) {\r\n        document.getElementById(node.id).className = \"node end\";\r\n      } else if (node.isBarrier) {\r\n        document.getElementById(node.id).className = \"node barrier\";\r\n      } else if (node.isCheckpoint) {\r\n        document.getElementById(node.id).className = \"node checkpoint\";\r\n      } else if (node.isWeight) {\r\n        document.getElementById(node.id).className = \"node weight\";\r\n      } else {\r\n        document.getElementById(node.id).className = \"node default\";\r\n      }\r\n    }\r\n  }\r\n}\r\n","export function clear(clearSelection, grid) {\r\n  let newGrid = grid;\r\n  let selection = null;\r\n\r\n  if (clearSelection === \"board\") {\r\n    selection = [\"isBarrier\", \"isWeight\", \"isCheckpoint\"];\r\n    for (let count = 0; count < 3; count++) {\r\n      newGrid = clearGridBySelection(selection[count], newGrid);\r\n    }\r\n  } else {\r\n    if (clearSelection === \"barriers\") {\r\n      selection = \"isBarrier\";\r\n    } else if (clearSelection === \"weights\") {\r\n      selection = \"isWeight\";\r\n    } else if (clearSelection === \"checkpoints\") {\r\n      selection = \"isCheckpoint\";\r\n    }\r\n    newGrid = clearGridBySelection(selection, grid);\r\n  }\r\n  return newGrid;\r\n}\r\n\r\nexport function clearGridBySelection(selection, grid) {\r\n  let newGrid = grid;\r\n  for (let row of newGrid) {\r\n    for (let node of row) {\r\n      node[selection] = false;\r\n      if (selection === \"isCheckpoint\") {\r\n        node.checkpointNumber = NaN;\r\n      } else if (selection === \"isWeight\") {\r\n        node.weight = 1;\r\n      }\r\n    }\r\n  }\r\n  return newGrid;\r\n}\r\n","export function findNode(nodeId, grid) {\r\n  const dimensions = {\r\n    row: grid.length,\r\n    column: grid[0].length,\r\n  };\r\n\r\n  for (let r = 0; r < dimensions.row; r++) {\r\n    for (let c = 0; c < dimensions.column; c++) {\r\n      if (grid[r][c].id === nodeId) {\r\n        return grid[r][c];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function findNodeRef(nodeId, grid) {\r\n  const dimensions = {\r\n    row: grid.length,\r\n    column: grid[0].length,\r\n  };\r\n\r\n  for (let r = 0; r < dimensions.row; r++) {\r\n    for (let c = 0; c < dimensions.column; c++) {\r\n      if (grid[r][c].id === nodeId) {\r\n        return { r, c };\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function findStart(grid) {\r\n  const dimensions = {\r\n    row: grid.length,\r\n    column: grid[0].length,\r\n  };\r\n\r\n  for (let r = 0; r < dimensions.row; r++) {\r\n    for (let c = 0; c < dimensions.column; c++) {\r\n      if (grid[r][c].isStart) {\r\n        return grid[r][c];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function findEnd(grid) {\r\n  const dimensions = {\r\n    row: grid.length,\r\n    column: grid[0].length,\r\n  };\r\n\r\n  for (let r = 0; r < dimensions.row; r++) {\r\n    for (let c = 0; c < dimensions.column; c++) {\r\n      if (grid[r][c].isEnd) {\r\n        return grid[r][c];\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { findNode, findNodeRef } from \"./nodeFinding\";\r\n\r\nexport function toggleNode(\r\n  button,\r\n  nodeId,\r\n  grid,\r\n  selectedAddon,\r\n  selectedWeight,\r\n  checkpoints\r\n) {\r\n  let newGrid = grid;\r\n\r\n  const preIndex = nodeId.split(\"-\");\r\n  let indexArray = [];\r\n  for (const element of preIndex) {\r\n    indexArray.push(parseInt(element));\r\n  }\r\n  let node = newGrid[indexArray[0]][indexArray[1]];\r\n\r\n  let newCheckpoints = checkpoints;\r\n  if (button === 0) {\r\n    if (\r\n      !node.isStart &&\r\n      !node.isEnd &&\r\n      !node.isWeight &&\r\n      !node.isCheckpoint &&\r\n      !node.isBarrier\r\n    ) {\r\n      if (selectedAddon === \"barriers\") {\r\n        node.isBarrier = true;\r\n      } else if (selectedAddon === \"weights\") {\r\n        node.isWeight = true;\r\n        node.weight = selectedWeight;\r\n      } else if (selectedAddon === \"checkpoints\") {\r\n        newCheckpoints.push(node);\r\n        node.checkpointNumber = newCheckpoints.length;\r\n        node.isCheckpoint = true;\r\n      }\r\n    }\r\n  } else if (button === 2) {\r\n    node.isBarrier = false;\r\n    node.isCheckpoint = false;\r\n    const index = checkpoints.findIndex(\r\n      (checkpoint) => checkpoint.id === node.id\r\n    );\r\n    if (index !== -1) {\r\n      newCheckpoints.splice(index, 1);\r\n      let cNumber = 1;\r\n      for (let checkpoint of newCheckpoints) {\r\n        const checkpointNode = findNode(checkpoint.id, newGrid);\r\n        newGrid[checkpointNode.location.row][\r\n          checkpointNode.location.column\r\n        ].checkpointNumber = cNumber;\r\n        cNumber++;\r\n      }\r\n    }\r\n    node.checkpointNumber = NaN;\r\n    node.isWeight = false;\r\n    node.weight = 1;\r\n  }\r\n\r\n  newGrid[indexArray[0]][indexArray[1]] = node;\r\n  return { newGrid, newCheckpoints };\r\n}\r\n\r\nexport function moveStart(oldNode, newNode, grid) {\r\n  let newNodeClone = newNode;\r\n  let oldNodeClone = oldNode;\r\n  let oldNodeRef = findNodeRef(oldNode.id, grid);\r\n  let newNodeRef = findNodeRef(newNode.id, grid);\r\n  let newGrid = grid;\r\n  if (\r\n    !(\r\n      newNode.isBarrier ||\r\n      newNode.isCheckpoint ||\r\n      newNode.isWeight ||\r\n      newNode.isEnd\r\n    )\r\n  ) {\r\n    newNodeClone.isStart = true;\r\n    oldNodeClone.isStart = false;\r\n    newGrid[oldNodeRef.r][oldNodeRef.c] = oldNodeClone;\r\n    newGrid[newNodeRef.r][newNodeRef.c] = newNodeClone;\r\n  }\r\n  return { newGrid, newNodeClone };\r\n}\r\n\r\nexport function moveEnd(oldNode, newNode, grid) {\r\n  let newNodeClone = newNode;\r\n  let oldNodeClone = oldNode;\r\n  let oldNodeRef = findNodeRef(oldNode.id, grid);\r\n  let newNodeRef = findNodeRef(newNode.id, grid);\r\n  let newGrid = grid;\r\n  if (\r\n    !(\r\n      newNode.isBarrier ||\r\n      newNode.isCheckpoint ||\r\n      newNode.isWeight ||\r\n      newNode.isStart\r\n    )\r\n  ) {\r\n    newNodeClone.isEnd = true;\r\n    oldNodeClone.isEnd = false;\r\n    newGrid[oldNodeRef.r][oldNodeRef.c] = oldNodeClone;\r\n    newGrid[newNodeRef.r][newNodeRef.c] = newNodeClone;\r\n  }\r\n  return { newGrid, newNodeClone };\r\n}\r\n","import { toggleNode, moveStart, moveEnd } from \"./nodeChanging\";\r\nimport { findNode, findStart, findEnd } from \"./nodeFinding\";\r\n\r\nexport function mouseDown(\r\n  e,\r\n  nodeId,\r\n  grid,\r\n  selectedAddon,\r\n  selectedWeight,\r\n  checkpoints\r\n) {\r\n  let mouse = {\r\n    down: true,\r\n    button: e.button,\r\n    onStart: false,\r\n    onEnd: false,\r\n  };\r\n  let newGrid = null;\r\n  let newCheckpoints = null;\r\n  const start = findStart(grid);\r\n  const end = findEnd(grid);\r\n  if (nodeId === start.id) {\r\n    mouse.onStart = true;\r\n  } else if (nodeId === end.id) {\r\n    mouse.onEnd = true;\r\n  } else {\r\n    const {\r\n      newGrid: toggledGrid,\r\n      newCheckpoints: changedCheckpoints,\r\n    } = toggleNode(\r\n      e.button,\r\n      nodeId,\r\n      grid,\r\n      selectedAddon,\r\n      selectedWeight,\r\n      checkpoints\r\n    );\r\n    newGrid = toggledGrid;\r\n    newCheckpoints = changedCheckpoints;\r\n  }\r\n  return { newGrid, newCheckpoints, mouse };\r\n}\r\n\r\nexport function mouseEnter(\r\n  nodeId,\r\n  mouse,\r\n  grid,\r\n  selectedAddon,\r\n  selectedWeight,\r\n  checkpoints\r\n) {\r\n  let newGrid = [];\r\n  let newNodeClone = {};\r\n  let changedNode = \"\";\r\n  let newCheckpoints = [];\r\n\r\n  if (mouse.onStart) {\r\n    const newNode = findNode(nodeId, grid);\r\n    const start = findStart(grid);\r\n    const { newGrid: toggledGrid, newNodeClone: nodeClone } = moveStart(\r\n      start,\r\n      newNode,\r\n      grid\r\n    );\r\n    newGrid = toggledGrid;\r\n    newNodeClone = nodeClone;\r\n    changedNode = \"start\";\r\n  } else if (mouse.onEnd) {\r\n    const newNode = findNode(nodeId, grid);\r\n    const end = findEnd(grid);\r\n    const { newGrid: toggledGrid, newNodeClone: nodeClone } = moveEnd(\r\n      end,\r\n      newNode,\r\n      grid\r\n    );\r\n    newGrid = toggledGrid;\r\n    newNodeClone = nodeClone;\r\n    changedNode = \"end\";\r\n  } else {\r\n    const {\r\n      newGrid: toggledGrid,\r\n      newCheckpoints: changedCheckpoints,\r\n    } = toggleNode(\r\n      mouse.button,\r\n      nodeId,\r\n      grid,\r\n      selectedAddon,\r\n      selectedWeight,\r\n      checkpoints\r\n    );\r\n    newGrid = toggledGrid;\r\n    newCheckpoints = changedCheckpoints;\r\n  }\r\n\r\n  return { newGrid, newNodeClone, changedNode, newCheckpoints };\r\n}\r\n","import { findStart, findEnd } from \"../utils/nodeFinding\";\r\n\r\nfunction mapGrid(grid) {\r\n  return grid.map((row) => {\r\n    return row.map((node) => {\r\n      if (node.isBarrier) {\r\n        return {\r\n          ...node,\r\n          visited: true,\r\n          distanceToStart: node.isStart ? 0 : Infinity,\r\n          prevNode: {\r\n            row: NaN,\r\n            column: NaN,\r\n          },\r\n        };\r\n      }\r\n      return {\r\n        ...node,\r\n        visited: false,\r\n        distanceToStart: node.isStart ? 0 : Infinity,\r\n        prevNode: {\r\n          row: NaN,\r\n          column: NaN,\r\n        },\r\n      };\r\n    });\r\n  });\r\n}\r\n\r\nfunction findClosestUnvisited(grid) {\r\n  const dimensions = {\r\n    row: grid.length,\r\n    column: grid[0].length,\r\n  };\r\n\r\n  let closestUnvisited = { distanceToStart: Infinity };\r\n\r\n  for (let row = 0; row < dimensions.row; row++) {\r\n    for (let column = 0; column < dimensions.column; column++) {\r\n      if (!grid[row][column].visited) {\r\n        if (\r\n          grid[row][column].distanceToStart < closestUnvisited.distanceToStart\r\n        ) {\r\n          closestUnvisited = grid[row][column];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return closestUnvisited;\r\n}\r\n\r\nfunction findUnvisitedNeighbors(currentNode, grid) {\r\n  let neighbors = [];\r\n  if (grid[currentNode.location.row + 1]) {\r\n    if (\r\n      !grid[currentNode.location.row + 1][currentNode.location.column].visited\r\n    ) {\r\n      neighbors.push(\r\n        grid[currentNode.location.row + 1][currentNode.location.column]\r\n      );\r\n    }\r\n  }\r\n  if (grid[currentNode.location.row][currentNode.location.column + 1]) {\r\n    if (\r\n      !grid[currentNode.location.row][currentNode.location.column + 1].visited\r\n    ) {\r\n      neighbors.push(\r\n        grid[currentNode.location.row][currentNode.location.column + 1]\r\n      );\r\n    }\r\n  }\r\n  if (grid[currentNode.location.row - 1]) {\r\n    if (\r\n      !grid[currentNode.location.row - 1][currentNode.location.column].visited\r\n    ) {\r\n      neighbors.push(\r\n        grid[currentNode.location.row - 1][currentNode.location.column]\r\n      );\r\n    }\r\n  }\r\n  if (grid[currentNode.location.row][currentNode.location.column - 1]) {\r\n    if (\r\n      !grid[currentNode.location.row][currentNode.location.column - 1].visited\r\n    ) {\r\n      neighbors.push(\r\n        grid[currentNode.location.row][currentNode.location.column - 1]\r\n      );\r\n    }\r\n  }\r\n  return neighbors;\r\n}\r\n\r\nexport function dijkstra(grid) {\r\n  let dijkstraGrid = mapGrid(grid);\r\n\r\n  let visitedNodes = [];\r\n  let currentNode = { isEnd: false };\r\n  while (!currentNode.isEnd) {\r\n    currentNode = findClosestUnvisited(dijkstraGrid);\r\n    if (currentNode.distanceToStart === Infinity) {\r\n      return { shortestPath: [], visitedNodes };\r\n    }\r\n    currentNode.visited = true;\r\n    // console.log(currentNode);\r\n\r\n    const unvisitedNeighbors = findUnvisitedNeighbors(\r\n      currentNode,\r\n      dijkstraGrid\r\n    );\r\n    // console.log(neighbors);\r\n\r\n    for (let neighbor of unvisitedNeighbors) {\r\n      const newDistance = currentNode.distanceToStart + neighbor.weight;\r\n      if (newDistance < neighbor.distanceToStart) {\r\n        neighbor.distanceToStart = newDistance;\r\n        neighbor.prevNode = currentNode;\r\n      }\r\n      dijkstraGrid[neighbor.location.row][neighbor.location.column] = neighbor;\r\n    }\r\n\r\n    dijkstraGrid[currentNode.location.row][\r\n      currentNode.location.column\r\n    ] = currentNode;\r\n    visitedNodes.push([{ id: currentNode.id }]);\r\n  }\r\n\r\n  // const startNode = findStart(dijkstraGrid);\r\n\r\n  // const endNode = currentNode;\r\n\r\n  let shortestPath = [];\r\n\r\n  while (!currentNode.isStart) {\r\n    shortestPath.unshift([{ id: currentNode.id }]);\r\n    currentNode = currentNode.prevNode;\r\n  }\r\n  shortestPath.unshift([{ id: currentNode.id }]);\r\n\r\n  // console.log(shortestPath);\r\n  // console.log(visitedNodes);\r\n\r\n  return { shortestPath, visitedNodes };\r\n}\r\n\r\nfunction createNewGrid(grid) {\r\n  let newGrid = [];\r\n  for (let r = 0; r < grid.length; r++) {\r\n    let newRow = [];\r\n    for (let c = 0; c < grid[0].length; c++) {\r\n      newRow.push({\r\n        id: r.toString() + \"-\" + c.toString(),\r\n        location: { row: r, column: c },\r\n        weight: grid[r][c].weight,\r\n        isStart: false,\r\n        isEnd: false,\r\n        isBarrier: grid[r][c].isBarrier,\r\n        isCheckpoint: false,\r\n        isWeight: grid[r][c].isWeight,\r\n      });\r\n    }\r\n    newGrid.push(newRow);\r\n  }\r\n  return newGrid;\r\n}\r\n\r\nexport function dijkstraCheckpoints(grid, checkpoints) {\r\n  const start = findStart(grid);\r\n  const end = findEnd(grid);\r\n\r\n  let shortestPath = [];\r\n  let visitedNodes = [];\r\n\r\n  for (let c = 0; c <= checkpoints.length; c++) {\r\n    const newGrid = createNewGrid(grid);\r\n    if (c === 0) {\r\n      newGrid[start.location.row][start.location.column].isStart = true;\r\n      newGrid[checkpoints[c].location.row][\r\n        checkpoints[c].location.column\r\n      ].isEnd = true;\r\n      let { shortestPath: short, visitedNodes: visited } = dijkstra(newGrid);\r\n      // console.log(short);\r\n      shortestPath.push(...short);\r\n      visitedNodes.push(...visited);\r\n    } else if (c === checkpoints.length) {\r\n      newGrid[checkpoints[c - 1].location.row][\r\n        checkpoints[c - 1].location.column\r\n      ].isStart = true;\r\n      newGrid[end.location.row][end.location.column].isEnd = true;\r\n      let { shortestPath: short, visitedNodes: visited } = dijkstra(newGrid);\r\n      short.splice(0, 1);\r\n      shortestPath.push(...short);\r\n      visitedNodes.push(...visited);\r\n    } else {\r\n      newGrid[checkpoints[c - 1].location.row][\r\n        checkpoints[c - 1].location.column\r\n      ].isStart = true;\r\n      newGrid[checkpoints[c].location.row][\r\n        checkpoints[c].location.column\r\n      ].isEnd = true;\r\n      let { shortestPath: short, visitedNodes: visited } = dijkstra(newGrid);\r\n      short.splice(0, 1);\r\n      shortestPath.push(...short);\r\n      visitedNodes.push(...visited);\r\n    }\r\n  }\r\n  return { shortestPath, visitedNodes };\r\n}\r\n","import { dijkstra, dijkstraCheckpoints } from \"./../algorithms/dijkstra\";\r\n\r\nexport function runAlgorithm(algorithm, grid, checkpoints) {\r\n  if (algorithm === \"dijkstra\") {\r\n    if (checkpoints.length === 0) {\r\n      return dijkstra(grid);\r\n    } else {\r\n      return dijkstraCheckpoints(grid, checkpoints);\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Controlbar from \"./controlbar\";\r\nimport Node from \"./node\";\r\nimport { animateNodes } from \"../utils/animate\";\r\nimport { reset } from \"./../utils/reset\";\r\nimport { clear } from \"./../utils/clear\";\r\nimport { mouseDown, mouseEnter } from \"./../utils/onMouseChange\";\r\nimport { runAlgorithm } from \"./../utils/runAlgorithm\";\r\nimport { generateGrid } from \"../utils/generateGrid\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"../css/pathfinder.css\";\r\n\r\nvar assert = require(\"assert\");\r\n\r\nclass Pathfinder extends Component {\r\n  state = {\r\n    grid: [],\r\n    algorithm: \"dijkstra\",\r\n    algorithms: [\"dijkstra\", \"algorithm 1\", \"algorithm 2\", \"algorithm 3\"],\r\n    animateState: false,\r\n    animateCompletion: 1, //1 for not started, 2 for algorithm animated started, 3 for shortestpath started, 4 for completed\r\n    visitedNodes: [],\r\n    shortestPath: [],\r\n    algorithmIndex: 0,\r\n    shortestPathIndex: 0,\r\n    checkpoints: [],\r\n    selectedAddon: \"barriers\",\r\n    selectedWeight: 5,\r\n    mouse: { down: false, button: NaN, onStart: false, onEnd: false },\r\n  };\r\n\r\n  dimensions = {\r\n    //if these values are to be modified, change node.css dimensions to match\r\n    row: 21,\r\n    column: 60,\r\n  };\r\n\r\n  start = {\r\n    row: 10,\r\n    column: 20,\r\n  };\r\n\r\n  end = {\r\n    row: 10,\r\n    column: 40,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const grid = generateGrid(this.dimensions, this.start, this.end);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  renderContainer = (grid) => {\r\n    return (\r\n      <table className=\"node-grid\" onMouseLeave={() => this.handleMouseUp()}>\r\n        <tbody>{this.renderNodes(grid)}</tbody>\r\n      </table>\r\n    );\r\n  };\r\n\r\n  renderNodes = (grid) => {\r\n    return grid.map((row, rowIndex) => {\r\n      return (\r\n        <tr className=\"node-row\" key={rowIndex} id={rowIndex}>\r\n          {row.map((node) => {\r\n            return (\r\n              <Node\r\n                key={node.id}\r\n                id={node.id}\r\n                location={node.location}\r\n                weight={node.weight}\r\n                isStart={node.isStart}\r\n                isEnd={node.isEnd}\r\n                isBarrier={node.isBarrier}\r\n                isCheckpoint={node.isCheckpoint}\r\n                checkpointNumber={node.checkpointNumber}\r\n                isWeight={node.isWeight}\r\n                onMouseDown={this.handleMouseDown}\r\n                onMouseUp={this.handleMouseUp}\r\n                onMouseEnter={this.handleMouseEnter}\r\n              />\r\n            );\r\n          })}\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n\r\n  animateAlgorithms = async (\r\n    animateCompletion,\r\n    visitedNodes,\r\n    shortestPath,\r\n    algorithmIndex,\r\n    shortestPathIndex\r\n  ) => {\r\n    //needed in this file since function does state checking through every iteration\r\n\r\n    let localCompletion = animateCompletion;\r\n\r\n    let aIndex = algorithmIndex;\r\n    let aStateChecker = localCompletion === 2 ? true : false;\r\n    while (aStateChecker) {\r\n      let animateNodesBind = animateNodes.bind(this);\r\n      await animateNodesBind(visitedNodes[aIndex], \"visited\", 10);\r\n      aIndex++;\r\n      aStateChecker = this.state.animateState;\r\n      if (aIndex === visitedNodes.length) {\r\n        aStateChecker = false;\r\n        localCompletion = 3;\r\n      }\r\n    }\r\n\r\n    let sIndex = 0;\r\n    if (shortestPath.length > 0) {\r\n      sIndex = shortestPathIndex;\r\n      let sStateChecker = localCompletion === 3 ? true : false;\r\n      while (sStateChecker) {\r\n        let animateNodesBind = animateNodes.bind(this);\r\n        await animateNodesBind(shortestPath[sIndex], \"shortest-path\", 40);\r\n        sIndex++;\r\n        sStateChecker = this.state.animateState;\r\n        if (sIndex === shortestPath.length) {\r\n          localCompletion = 4;\r\n          console.log(\"Completed\");\r\n          sStateChecker = false;\r\n        }\r\n      }\r\n    }\r\n    this.setState({\r\n      algorithmIndex: aIndex,\r\n      shortestPathIndex: sIndex,\r\n      animateCompletion: localCompletion,\r\n      animateState: false,\r\n    });\r\n  };\r\n\r\n  handleVisualize = async () => {\r\n    const {\r\n      animateState,\r\n      animateCompletion,\r\n      grid,\r\n      algorithm,\r\n      shortestPathIndex,\r\n      algorithmIndex,\r\n      checkpoints,\r\n    } = this.state;\r\n    assert(animateState === false && animateCompletion === 1);\r\n    this.setState({ animateState: true, animateCompletion: 2 });\r\n\r\n    const { shortestPath, visitedNodes } = runAlgorithm(\r\n      algorithm,\r\n      grid,\r\n      checkpoints\r\n    );\r\n    // console.log(visitedNodes);\r\n    // console.log(shortestPath);\r\n    if (shortestPath.length === 0) {\r\n      toast.error(\"No path to destination was found...\");\r\n    }\r\n\r\n    this.setState({ shortestPath, visitedNodes });\r\n    console.log(\"Initiating\");\r\n    await this.animateAlgorithms(\r\n      2,\r\n      visitedNodes,\r\n      shortestPath,\r\n      algorithmIndex,\r\n      shortestPathIndex\r\n    );\r\n  };\r\n\r\n  handlePausePlay = async () => {\r\n    const {\r\n      animateState,\r\n      animateCompletion,\r\n      shortestPath,\r\n      visitedNodes,\r\n      shortestPathIndex,\r\n      algorithmIndex,\r\n    } = this.state;\r\n    assert(animateCompletion === 2 || animateCompletion === 3);\r\n\r\n    let newState = !animateState;\r\n    this.setState({ animateState: newState });\r\n\r\n    if (newState === true) {\r\n      console.log(\"Resuming\");\r\n      await this.animateAlgorithms(\r\n        animateCompletion,\r\n        visitedNodes,\r\n        shortestPath,\r\n        algorithmIndex,\r\n        shortestPathIndex\r\n      );\r\n    } else {\r\n      console.log(\"Paused\");\r\n    }\r\n  };\r\n\r\n  handleReset = () => {\r\n    const { grid } = this.state;\r\n    this.setState({ animateState: false }); //stops animation\r\n    setTimeout(() => {\r\n      //resets everything\r\n      reset(grid);\r\n      this.setState({\r\n        animateCompletion: 1,\r\n        algorithmIndex: 0,\r\n        shortestPathIndex: 0,\r\n        visitedNodes: [],\r\n        shortestPath: [],\r\n      });\r\n      console.log(\"Terminated\");\r\n    }, 11);\r\n  };\r\n\r\n  handleAlgorithmSelect = (algorithm) => {\r\n    this.setState({ algorithm });\r\n    this.handleReset();\r\n  };\r\n\r\n  handleAddonSelect = (addon) => {\r\n    this.setState({ selectedAddon: addon });\r\n  };\r\n\r\n  handleClear = (clearSelection) => {\r\n    const { grid, animateCompletion } = this.state;\r\n    if (animateCompletion !== 1) {\r\n      return toast.error(\r\n        \"Please reset or wait for visualization to complete before clearing :)\"\r\n      );\r\n    }\r\n    const newGrid = clear(clearSelection, grid);\r\n\r\n    if (clearSelection === \"checkpoints\" || clearSelection === \"board\") {\r\n      this.setState({ checkpoints: [] });\r\n    }\r\n    this.setState({ grid: newGrid });\r\n  };\r\n\r\n  handleMouseDown = (e, nodeId) => {\r\n    const {\r\n      animateCompletion,\r\n      grid,\r\n      selectedAddon,\r\n      selectedWeight,\r\n      checkpoints,\r\n    } = this.state;\r\n    if (animateCompletion !== 1) {\r\n      return toast.error(\r\n        \"Please reset or clear the board before making changes!\"\r\n      );\r\n    }\r\n    const { newGrid, newCheckpoints, mouse } = mouseDown(\r\n      e,\r\n      nodeId,\r\n      grid,\r\n      selectedAddon,\r\n      selectedWeight,\r\n      checkpoints\r\n    );\r\n    if (newGrid !== null && newCheckpoints !== null) {\r\n      this.setState({ grid: newGrid, checkpoints: newCheckpoints });\r\n    }\r\n    this.setState({ mouse });\r\n  };\r\n\r\n  handleMouseEnter = (nodeId) => {\r\n    const {\r\n      mouse,\r\n      grid,\r\n      selectedAddon,\r\n      selectedWeight,\r\n      checkpoints,\r\n    } = this.state;\r\n    if (mouse.down) {\r\n      const { newGrid, newNodeClone, changedNode, newCheckpoints } = mouseEnter(\r\n        nodeId,\r\n        mouse,\r\n        grid,\r\n        selectedAddon,\r\n        selectedWeight,\r\n        checkpoints\r\n      );\r\n      if (mouse.onStart || mouse.onEnd) {\r\n        this.setState({\r\n          [changedNode]: {\r\n            row: newNodeClone.location.row,\r\n            column: newNodeClone.location.column,\r\n          },\r\n        });\r\n      } else {\r\n        this.setState({ checkpoints: newCheckpoints });\r\n      }\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  };\r\n\r\n  handleMouseUp = () => {\r\n    const mouse = {\r\n      down: false,\r\n      button: NaN,\r\n      onStart: false,\r\n      onEnd: false,\r\n    };\r\n    this.setState({ mouse });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      grid,\r\n      animateState,\r\n      animateCompletion,\r\n      algorithm,\r\n      algorithms,\r\n      selectedAddon,\r\n    } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <Controlbar\r\n          onVisualize={this.handleVisualize}\r\n          onPause={this.handlePausePlay}\r\n          onReset={this.handleReset}\r\n          animateState={animateState}\r\n          animateCompletion={animateCompletion}\r\n          algorithm={algorithm}\r\n          algorithms={algorithms.filter((a) => a !== algorithm)}\r\n          onAlgorithmSelect={this.handleAlgorithmSelect}\r\n          onAddonSelect={this.handleAddonSelect}\r\n          selectedAddon={selectedAddon}\r\n          onClear={this.handleClear}\r\n        />\r\n        <div>{this.renderContainer(grid)}</div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pathfinder;\r\n","export function generateGrid({ row, column }, start, end) {\r\n  let grid = [];\r\n\r\n  for (let r = 0; r < row; r++) {\r\n    let currentRow = [];\r\n\r\n    for (let c = 0; c < column; c++) {\r\n      currentRow.push({\r\n        id: r.toString() + \"-\" + c.toString(),\r\n        location: { row: r, column: c },\r\n        weight: 1,\r\n        isStart: r === start.row && c === start.column ? true : false,\r\n        isEnd: r === end.row && c === end.column ? true : false,\r\n        isBarrier: false,\r\n        isCheckpoint: false,\r\n        checkpointNumber: NaN,\r\n        isWeight: false,\r\n      });\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n\r\n  return grid;\r\n}\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faWeightHanging,\r\n  faCircle,\r\n  faPlayCircle,\r\n  faStopCircle,\r\n  faSquareFull,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"../css/infoMenu.css\";\r\n\r\nconst InfoMenu = () => {\r\n  return (\r\n    <div className=\"info-menu\">\r\n      <div className=\"legend\">\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon icon={faPlayCircle} size=\"2x\" />\r\n          <p className=\"legend-item-label\">Start</p>\r\n        </div>\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon icon={faStopCircle} size=\"2x\" />\r\n          <p className=\"legend-item-label\">End</p>\r\n        </div>\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon\r\n            icon={faSquareFull}\r\n            className=\"barrier-icon\"\r\n            size=\"2x\"\r\n          />\r\n          <p className=\"legend-item-label\">Barrier</p>\r\n        </div>\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon\r\n            icon={faWeightHanging}\r\n            size=\"2x\"\r\n            className=\"weight-icon\"\r\n          />\r\n          <p className=\"legend-item-label\">Weight</p>\r\n        </div>\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon\r\n            icon={faCircle}\r\n            size=\"2x\"\r\n            className=\"checkpoint-icon\"\r\n          />\r\n          <p className=\"legend-item-label\">Checkpoint</p>\r\n        </div>\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon\r\n            icon={faSquareFull}\r\n            className=\"visited-icon\"\r\n            size=\"2x\"\r\n          />\r\n          <p className=\"legend-item-label\">Visited</p>\r\n        </div>\r\n        <div className=\"legend legend-item\">\r\n          <FontAwesomeIcon\r\n            icon={faSquareFull}\r\n            className=\"shortest-path-icon\"\r\n            size=\"2x\"\r\n          />\r\n          <p className=\"legend-item-label\">Shortest Path</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"quick-guide\">\r\n        <h2 className=\"header\">Quick Guide</h2>\r\n        <table className=\"menu-table\">\r\n          <tbody>\r\n            <tr>\r\n              <td className=\"table-column\">\r\n                <div className=\"list-item\">\r\n                  <p className=\"list-item-label\">\r\n                    Select an algorithm along the top left and click visualize!\r\n                  </p>\r\n                  <div className=\"content-separator\" />\r\n                </div>\r\n\r\n                <div className=\"list-item\">\r\n                  <p className=\"list-item-label\">\r\n                    Select an addon on the top right and left click/drag along\r\n                    the board to add addons.\r\n                  </p>\r\n                  <div className=\"content-separator\" />\r\n                </div>\r\n                <div className=\"list-item\">\r\n                  <p className=\"list-item-label\">\r\n                    Right click/drag along the board to remove any addons.\r\n                  </p>\r\n                </div>\r\n              </td>\r\n              <td className=\"table-column\">\r\n                <div className=\"list-item\">\r\n                  <p className=\"list-item-label\">\r\n                    Click reset to change the board or perform another\r\n                    visualization.\r\n                  </p>\r\n                  <div className=\"content-separator\" />\r\n                </div>\r\n                <div className=\"list-item\">\r\n                  <p className=\"list-item-label\">\r\n                    Click and drag the start and end nodes to move the starting\r\n                    and ending points of the visualization.\r\n                  </p>\r\n                  <div className=\"content-separator\" />\r\n                </div>\r\n                <div className=\"list-item\">\r\n                  <p className=\"list-item-label\">\r\n                    While visualizing, changing the board will be disabled.\r\n                    Click reset to make any changes.\r\n                  </p>\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoMenu;\r\n","import React, { Component } from \"react\";\nimport Pathfinder from \"./pathfinder\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"../css/App.css\";\nimport InfoMenu from \"./infoMenu\";\n\nclass App extends Component {\n  state = {};\n\n  render() {\n    return (\n      <React.Fragment>\n        <ToastContainer />\n        <Pathfinder />\n        <InfoMenu />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap.js\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}